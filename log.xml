<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>ELIAS NEMA</title>
<link>https://www.eliasnema.com/log.html</link>
<atom:link href="https://www.eliasnema.com/log.xml" rel="self" type="application/rss+xml"/>
<description>Making data work: analytics, personalisation, relevance and recommender systems - whatever is takes.</description>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Fri, 17 Mar 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Data Feed #6: JSON {}</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2023-03-17.html</link>
  <description><![CDATA[ 





<section id="focus-json" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="focus-json">Focus: JSON</h2>
<p>PostgreSQL can deal with JSON for a very long time (and here is a great history<sup>1</sup> of it), but now is also able to write the server log in JSON format.<sup>2</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;<a href="https://www.infoworld.com/article/3651356/jsonb-in-postgresql-today-and-tomorrow.html">JSONB in PostgreSQL today and tomorrow</a></p></div><div id="fn2"><p><sup>2</sup>&nbsp;<a href="https://www.cybertec-postgresql.com/en/json-logs-in-postgresql-15/">JSON logs in PostgreSQL 15</a></p></div><div id="fn3"><p><sup>3</sup>&nbsp;<a href="https://www.cockroachlabs.com/blog/high-performance-json-parsing/">High-performance JSON parsing in Go</a></p></div></div><p>A deep dive into the potential performance issues when parsing JSON.<sup>3</sup></p>
<p><a href="https://planetscale.com/blog/the-mysql-json-data-type">The MySQL JSON data type.</a></p>
<p>In SQLite, JSON functions are built-in and on by default since 3.38, along with <code>-&gt;</code> and <code>-&gt;&gt;</code> operators, compatible with MySQL and PostgreSQL.<sup>4</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;<a href="https://www.sqlite.org/releaselog/3_38_0.html">SQLite Release 3.38.0</a></p></div></div><p>DuckDB:</p>
<ul>
<li>DuckDB can read JSON files as tables, and here is an example of querying GH Archive data.<sup>5</sup></li>
<li>JSON support was a big part of a DuckDB 0.7.0 release.<sup>6</sup></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;<a href="https://duckdb.org/2023/03/03/json.html">Shredding Deeply Nested JSON, One Vector at a Time</a></p></div><div id="fn6"><p><sup>6</sup>&nbsp;<a href="https://duckdb.org/2023/02/13/announcing-duckdb-070.html">Announcing DuckDB 0.7.0</a></p></div></div></section>
<section id="learning" class="level2">
<h2 class="anchored" data-anchor-id="learning">Learning</h2>
<p><a href="https://www.cockroachlabs.com/blog/what-is-a-uuid/">What is a UUID, and what is it used for?</a></p>
<p>Data migrations are still of the hardest problems in engineering, and AWS has written a couple of recent articles about that:</p>
<ul>
<li><a href="https://aws.amazon.com/blogs/database/migrate-an-internet-scale-online-transactional-system-to-amazon-dynamodb-using-aws-dms/">Migrate an internet-scale online transactional system to Amazon DynamoDB using AWS DMS.</a></li>
<li><a href="https://aws.amazon.com/blogs/database/how-skai-performed-database-and-migration-with-aws-dms/">How Skai performed database modernization and migration with AWS DMS.</a></li>
</ul>
<p><a href="https://www.crunchydata.com/blog/easy-postgresql-time-bins">Easy PostgreSQL time bins.</a></p>
<p><a href="https://techcommunity.microsoft.com/t5/azure-database-for-postgresql/announcing-data-api-builder-preview-for-postgresql/ba-p/3766768">Announcing Data API Builder (preview) for PostgreSQL.</a></p>
<p><a href="https://redpanda.com/blog/advertised-kafka-address-explanation">What is advertised Kafka address?</a></p>
<p><a href="https://passdatacommunitysummit.com/">PASS Data Community Summit</a> is in Seattle on November 14-17 with a call for speakers still open.</p>
<p><a href="https://redpanda.com/blog/stream-processing-apache-flink-etl">Getting started: Stream processing using Apache Flink and Redpanda.</a></p>
</section>
<section id="deep-dive" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="deep-dive">Deep Dive</h2>
<p>An AMAZING, more than 600 pages book focusing on PostgreSQL internals.<a href="https://www.eliasnema.com/data-feed/2023-03-17.html#fn7"><sup>7</sup></a> A must-read!</p>
<p>Enabling <a href="https://docs.oracle.com/database/121/UNXAR/appi_vlm.htm#UNXAR391">Linux Huge Pages</a> for Postgres and MySQL.<sup>7</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;<a href="http://smalldatum.blogspot.com/2023/03/huge-pages-with-postgres-innodb-better.html">Huge pages with Postgres &amp; InnoDB: better perf, but a bit more work.</a></p></div></div><p><a href="https://www.enterprisedb.com/blog/performance-comparison-major-PostgreSQL-versions">Performance comparison of the major PostgreSQL versions.</a></p>
<p>Overview of machine learning-based automatic database tuning techniques at OtterTune.<sup>8</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;<a href="https://ottertune.com/blog/ottertune-1-5-to-2-0-where-we-are-and-where-were-going/">OtterTune 1.5 to 2.0: Where We Are and Where We’re Going</a></p></div></div><p><a href="https://www.cybertec-postgresql.com/en/bad-check-constraints-postgresql/">Breaking your PostgreSQL database with bad <code>CHECK</code> constraints.</a></p>
</section>
<section id="business" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="business">Business</h2>
<p><a href="https://cloud.google.com/blog/products/ai-machine-learning/top-5-data-and-ai-trends-this-year">The top five global data and AI trends in 2023 from Google Cloud.</a></p>
<p>A new whitepaper from AWS on Data Lakes cost modeling best practices.<sup>9</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn9"><p><sup>9</sup>&nbsp;<a href="https://docs.aws.amazon.com/whitepapers/latest/cost-modeling-data-lakes/defining-the-approach-to-cost-modeling-data-lakes.html">Cost modeling Data Lakes for beginners</a></p></div></div><p><a href="https://www.enterprisedb.com/blog/Postgres-Powered-Community-Open-Source">Community and open source: the secret to PostgreSQL’s success.</a></p>
<p><a href="https://www.yugabyte.com/blog/database-security-stability-client-satisfaction-fiserv/">Prioritizing security, stability, and client satisfaction: insight from Fiserv’s VP and fellow architect.</a></p>


</section>


 ]]></description>
  <guid>https://www.eliasnema.com/posts/newsletter/2023-03-17.html</guid>
  <pubDate>Fri, 17 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.eliasnema.com/posts/df2-small.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Data Feed #5: GEO</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2023-03-10.html</link>
  <description><![CDATA[ 





<p>You should also check out a recent <a href="https://www.eliasnema.com/data-feed/paper-transactional-model/paper-transactional.html">deep dive into a foundational paper</a> - “The Transaction Concept: Virtues and Limitations” by Jim Gray, 1981.</p>
<section id="focus-geo" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="focus-geo">Focus: GEO</h2>
<p>A couple of great posts from <a href="https://tech.marksblogg.com/">Mark Litwintschik</a>:</p>
<ul>
<li>Exploration of a FlixBus dataset and using SQL for some route planning.<sup>1</sup></li>
<li>DuckDB for geospatial data (spoiler: it outperformed previous winner ClickHouse).<sup>2</sup></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;<a href="https://tech.marksblogg.com/route-planning-europe-postgresql-pgrouting.html">European Route Planning</a></p></div><div id="fn2"><p><sup>2</sup>&nbsp;<a href="https://tech.marksblogg.com/duckdb-geospatial-gis.html">Geospatial DuckDB</a></p></div></div><p>H3 extensions:</p>
<ul>
<li><a href="https://github.com/isaacbrodsky/h3-duckdb">h3-duckdb</a></li>
<li><a href="https://blog.rustprooflabs.com/2022/06/h3-indexes-on-postgis-data">H3 indexes for performance with PostGIS data.</a></li>
</ul>
<p>Another approach is to use a web API-based geocoder. Here is an example from a Crunchy Bridge.<sup>3</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;<a href="https://www.kschaul.com/post/2023/02/16/how-the-post-is-replacing-mapbox-with-open-source-solutions/">How The Post is replacing Mapbox with open source solutions</a></p></div><div id="fn4"><p><sup>4</sup>&nbsp;<a href="https://supabase.com/blog/geo-queries-with-postgis-in-ionic-angular">Geo Queries with PostGIS in Ionic Angular</a></p></div></div><p>Using PostGIS in Supabase to build an app in Ionic Angular.<sup>4</sup></p>
</section>
<section id="vectors" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="vectors">Vectors</h2>
<p>Following up on <a href="https://www.eliasnema.com/data-feed/2023-03-03.html">last week’s issue about vectors</a>, here is an amazing SQLite extension for vector search, that is based on faiss.<sup>5</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;<a href="https://observablehq.com/@asg017/introducing-sqlite-vss">Introducing sqlite-vss</a></p></div></div></section>
<section id="learning" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="learning">Learning</h2>
<p><a href="https://aws.amazon.com/blogs/big-data/simplify-data-loading-into-type-2-slowly-changing-dimensions-in-amazon-redshift/">Simplify data loading into Type 2 slowly changing dimensions in Amazon Redshift.</a></p>
<p><a href="https://www.philipotoole.com/9-years-of-open-source-database-development-the-design-docs/">9 years of open-source database development: reviewing rqlite design choices.</a></p>
<p><a href="https://www.timescale.com/blog/best-practices-for-time-series-data-modeling-single-or-multiple-partitioned-table-s-a-k-a-hypertables/">Best practices for time-series data modeling: single or multiple partitioned table(s) a.k.a. hypertables.</a></p>
<p><a href="https://aws.amazon.com/blogs/database/choose-the-right-postgresql-data-access-pattern-for-your-saas-application/">Choose the right PostgreSQL data access pattern for your SaaS application.</a></p>
<p><a href="https://redpanda.com/blog/placement-groups-high-availability-cluster">How to use Placement Groups to achieve high availability.</a></p>
<p><a href="https://www.scylladb.com/2023/03/08/rust-in-the-real-world-super-fast-data-ingestion-using-scylladb/">Rust in the real world: super fast data ingestion using ScyllaDB.</a></p>
<p><a href="https://aws.amazon.com/blogs/big-data/build-an-end-to-end-change-data-capture-with-amazon-msk-connect-and-aws-glue-schema-registry/">Build an end-to-end change data capture with Amazon MSK Connect and AWS Glue Schema Registry.</a></p>
<p><a href="https://www.yugabyte.com/blog/design-indexes-query-performance-distributed-database/">How to design distributed indexes for optimal query performance.</a></p>
<p>Amazon Athena editor is finally getting quite a few keyboard shortcuts🙌 <sup>6</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;<a href="https://aws.amazon.com/blogs/big-data/improve-productivity-by-using-keyboard-shortcuts-in-amazon-athena-query-editor/">Improve productivity by using keyboard shortcuts in Amazon Athena query editor</a></p></div></div></section>
<section id="upcoming-conferences" class="level2">
<h2 class="anchored" data-anchor-id="upcoming-conferences">Upcoming Conferences</h2>
<p>Distributed <a href="https://www.yugabyte.com/blog/distributed-sql-summit-asia-registration-is-now-open/">SQL Summit</a> by YugabyteDB.</p>
<p>Cassandra Forward and <a href="https://www.datastax.com/blog/cassandraforward">why you don’t want to miss it</a>.</p>
</section>
<section id="deep-dive" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="deep-dive">Deep Dive</h2>
<p>Great stories with examples from Quora on challenges faced in modelling, querying and writing to a DB of an internet-scale service.<sup>7</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;<a href="https://quoraengineering.quora.com/Optimizing-the-databases-at-Quora">Optimizing the databases at Quora</a></p></div></div><p><a href="https://www.timescale.com/blog/the-power-of-linked-data-event-streams-and-timescaledb-for-real-time-management-of-time-series-data/">The power of linked data event streams and timescale for real-time management of time-series data.</a></p>
<p>How to configure PGSnapper for better insights into the PostgreSQL performance on AWS.<sup>8</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;<a href="https://aws.amazon.com/blogs/database/monitor-amazon-rds-for-postgresql-and-amazon-aurora-postgresql-performance-using-pgsnapper/">Monitor Amazon RDS for PostgreSQL and Amazon Aurora PostgreSQL performance using PGSnapper</a></p></div></div><p><a href="https://engineering.adjust.com/post/11_tb_wal_in_postgresql/">11TB WAL in PostgreSQL</a></p>
<p>Designing a new ChunkStore for Dolt - a database that uses a storage engine inspired by Git.<sup>9</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn9"><p><sup>9</sup>&nbsp;<a href="https://www.dolthub.com/blog/2023-03-08-dolt-chunk-journal/">Journaling Chunk Store</a></p></div></div></section>
<section id="business" class="level2">
<h2 class="anchored" data-anchor-id="business">Business</h2>
<p><a href="https://www.cockroachlabs.com/blog/5-fintech-companies-refused-to-sacrifice-scale-availability-or-consistency/">How 5 fintech companies build for scale, availability, and consistency.</a></p>
<p><a href="https://www.snowflake.com/blog/how-financial-services-mitigate-financial-crime-incidents/">Mitigating financial crime incidents in the financial services sector.</a></p>
<p><a href="https://ravendb.net/articles/how-to-boost-queries-by-800-without-abandoning-your-relational-system">How to boost queries by 800% without abandoning your relational system.</a></p>


</section>


 ]]></description>
  <guid>https://www.eliasnema.com/posts/newsletter/2023-03-10.html</guid>
  <pubDate>Fri, 10 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.eliasnema.com/posts/df2-small.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Foundational Paper: The Transaction Concept</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2023-03-08-transactional-concept.html</link>
  <description><![CDATA[ 





<p><a href="https://jimgray.azurewebsites.net/papers/theTransactionConcept.pdf">“The Transaction Concept: Virtues and Limitations”</a> paper lays down the foundation for the transactions in computer systems. It describes the concepts of ACID (not yet acronymized in the paper), undo and redo logs, and design for highly available systems. I enjoyed the paper a lot. Simple language, analogies, and a look at history make it a stark contrast to many of the modern papers, where looking sophisticated is often more important than the substance.</p>
<p>As always, I start with the visual representation of the paper in which I distilled and connected the most important points:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.eliasnema.com/data-feed/paper-transactional-model/transactional-model-sm.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Diagram: the concept of a transaction as described by Jim Gray in 1981."><img src="https://www.eliasnema.com/data-feed/paper-transactional-model/transactional-model-sm.png" class="img-fluid figure-img" alt="Diagram: the concept of a transaction as described by Jim Gray in 1981."></a></p>
<figcaption>Diagram: the concept of a transaction as described by Jim Gray in 1981.</figcaption>
</figure>
</div>
<p>But the paper itself is far more poetic. For example, from now on that’s the only acceptable history horizon to look back at a problem:</p>
<ul>
<li><em>“The legendary Greeks, Ariadne and Theseus, <strong>invented logging.</strong> Ariadne gave Theseus a magic ball of string which he unraveled as he searched the Labyrinth for the Minotaur. Having slain the Minotaur, Theseus followed the string back to the entrance rather then remaining lost in the Labyrinth. This string was his log allowing him to undo the process of entering the Labyrinth. But the Minotaur was not a protected object so its death was not undone by Theseus’ exit.”</em></li>
<li><em>“Hansel and Gretel copied Theseus’ trick as they wandered into the woods in search of berries. They left behind a trail of crumbs that would allow them to retrace their steps by following the trail backwards, and would allow their parents to find them by following the trail forwards. This was the first undo and redo log. Unfortunately, a bird ate the crumbs and caused <strong>the first log failure.</strong>”</em></li>
</ul>
<p>Gray talks about transactions in human terms, as derived from the contract law:</p>
<ul>
<li><em>“The Christian wedding ceremony gives a good example of such a contract. The bride and groom “negotiate” for days or years and then appoint a minister to conduct the marriage ceremony. The minister first asks if anyone has any objections to the marriage; he then asks the bride and groom if they agree to the marriage. If they both say, “I do”, he pronounces them man and wife.”</em></li>
</ul>
<p>He also comes up with <strong>Consistency, Atomicity, and Durability</strong> as properties of a transaction (<em>Isolation</em> is not yet explicitly mentioned, but the concept is described in the logging implementation):</p>
<ul>
<li><em>“If transactions run concurrently, one transaction might read the outputs (updates or messages) of another transaction. If the first transaction aborts, then undoing it requires undoing the updates or messages read by the second transaction. This in turn requires undoing the second transaction. But the second transaction may have already committed and so cannot be undone. To prevent this dilemma, real and protected updates (undoable updates) of a transaction <strong>must be hidden from other transactions until the transaction commits.</strong> To assure that reading two related records, or rereading the same record, will give consistent results, one must also stabilize records which a transaction reads and keep them constant until the transaction commits. Otherwise a transaction could reread a record and get two different answers.”</em></li>
</ul>
<p>Going back to Von Neumann for the concept of building reliable systems by adding redundancy to the systems:</p>
<ul>
<li><em>“John Von Neumann is credited with the observation that a very reliable (and available) system can be built from unreliable components. Von Neumann’ s idea was to use redundancy and majority logic on a grand scale (20,000 wires for one wire) in order to get mean- times-to-failure measured in decades. Von Neumann was thinking in terms of neurons and vacuum tubes which have mean-times-to-failures measured in days and which are used in huge quantities (millions or billions) in a system. In addition, Von Neumann’s model was flat so that any failure in a chain broke the whole chain.”</em></li>
</ul>
<p>I also haven’t realised how many of the transaction problems in computer come from the possibility of in-place updates:</p>
<ul>
<li><em>The advent of direct access storage (discs and drums) changed this. It was now possible to update only a part of a file. Rather than copying the whole disc whenever one part was updated, it became attractive to update just the parts that changed in order to construct the new master. Some of these techniques, notably side files and differential files did not update the old master and hence followed good accounting techniques. But <strong>for performance reasons, most disc-based systems have been seduced into updating the data in place.</strong></em></li>
</ul>
<p>And the importance of what now is popular to call <strong>idempotency:</strong></p>
<p><em>- “Another detail is that the <strong>undo and redo operations must be restartable,</strong> that is if the operation is already undone or redone, the operation should not damage or change the object state. The need for restartability comes from the need to deal with failures during undo and redo processing. Restartability is usually accomplished with version numbers (for disc pages) and with sequence numbers (for virtual circuits or sessions). Essentially, the undo or redo operation reads the version or sequence number and does nothing if it is the desired number. Otherwise it transforms the object and the sequence number.”</em></p>



 ]]></description>
  <guid>https://www.eliasnema.com/posts/newsletter/2023-03-08-transactional-concept.html</guid>
  <pubDate>Wed, 08 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.eliasnema.com/posts/df2-small.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Data Feed #4: Vectors</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2023-03-03.html</link>
  <description><![CDATA[ 





<section id="focus-vectors" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="focus-vectors">Focus: Vectors</h2>
<p>Using open-source vector similarity extension for Postgres<sup>1</sup>:</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;<a href="https://github.com/pgvector/pgvector">pgvector</a></p></div></div><ul>
<li><a href="https://www.crunchydata.com/blog/whats-postgres-got-to-do-with-ai">What’s Postgres Got To Do With AI?</a></li>
<li>Using postgres_scanner<sup>2</sup> to <a href="https://blog.eto.ai/vector-similarity-search-with-duckdb-44dec043532a">read vectors from PG in DuckDB</a>.</li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;<a href="https://duckdb.org/docs/extensions/postgres_scanner.html">postgres_scanner</a></p></div><div id="fn3"><p><sup>3</sup>&nbsp;<a href="https://dl.acm.org/doi/pdf/10.1145/3318464.3386131">PASE: PostgreSQL Ultra-High-Dimensional Approximate Nearest Neighbor Search Extension</a></p></div></div><p>A detailed paper from SIGMOD’20<sup>3</sup> describes how Alibaba designed and built an approximate nearest neighbor search extension for vector similarity. Great deep dive into page structures for ANN indexes, and the <a href="https://github.com/alipay/PASE">code is even available</a> (though, not maintained).</p>
<p>Using vector functions in SingleStore’s SQL, but not clear how well the system scales since the example uses only 7000 vectors.<sup>4</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;<a href="https://www.singlestore.com/blog/using-vector-functions-image-matching-sql/">Image Matching in SQL with SingleStoreDB</a></p></div><div id="fn5"><p><sup>5</sup>&nbsp;<a href="https://aws.amazon.com/blogs/big-data/build-a-semantic-search-engine-for-tabular-columns-with-transformers-and-amazon-opensearch-service/">Build a semantic search engine for tabular columns with Transformers and Amazon OpenSearch Service</a></p></div></div><p>An amazing use-case (as far as I’m concerned, <a href="https://www.datagalaxy.com/en/blog/data-swamp-vs-data-lake/">data swamps</a> are real) of representing individual columns in the embedding space by utilising pre-trained transformer models. Then, using those vectors to find semantically similar data <em>within your data.</em><sup>5</sup></p>
</section>
<section id="learning" class="level2">
<h2 class="anchored" data-anchor-id="learning">Learning</h2>
<p><a href="https://aws.amazon.com/blogs/big-data/use-apache-iceberg-in-a-data-lake-to-support-incremental-data-processing/">Use Apache Iceberg in a data lake to support incremental data processing.</a></p>
<p><a href="https://aws.amazon.com/blogs/big-data/access-amazon-athena-in-your-applications-using-the-websocket-api/">Access Amazon Athena in your applications using the WebSocket API.</a></p>
<p><a href="https://crate.io/blog/guide-to-bitwise-operators-in-cratedb">Guide to bitwise operators in CrateDB.</a></p>
<p><a href="https://grafana.com/blog/2023/03/02/grafana-labs-webinars-reduce-mttr-build-beautiful-grafana-dashboards-and-more/">Grafana Labs webinars: Reduce MTTR, build beautiful Grafana dashboards, and more.</a></p>
<p><a href="https://blog.netdata.cloud/anomaly-detection-on-prometheus-metrics/#gsc.tab=0">Anomaly detection on Prometheus metrics.</a></p>
<p><a href="https://www.dolthub.com/blog/2023-03-01-change-data-capture/">So you want Change Data Capture?</a></p>
<p><a href="https://aws.amazon.com/blogs/big-data/patterns-for-enterprise-data-sharing-at-scale/">Patterns for enterprise data sharing at scale.</a></p>
</section>
<section id="deep-dive" class="level2">
<h2 class="anchored" data-anchor-id="deep-dive">Deep Dive</h2>
<p>A new lecture is out from the <a href="https://15721.courses.cs.cmu.edu/spring2023/">CMU Advanced Databases</a> course on <a href="https://www.youtube.com/watch?v=pqRV7Mss1Fg">Parallel Hash Join Algorithms</a>. If you are into data, you should have a very good reason for not watching this playlist.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/pqRV7Mss1Fg" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="business" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="business">Business</h2>
<p>Amazing (as always) write-up about using TimescaleDB in the wild, and why compression is crucial for the time-series databases.<sup>6</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;<a href="https://www.timescale.com/blog/how-ndustrial-is-providing-fast-real-time-queries-and-safely-storing-client-data-with-97-compression/">How Ndustrial Is Providing Fast Real-Time Queries and Safely Storing Client Data With 97 % Compression</a></p></div></div><p><a href="https://aws.amazon.com/blogs/database/how-wiz-used-amazon-elasticache-to-improve-performance-and-reduce-costs/">How Wiz used Amazon ElastiCache to improve performance and reduce costs.</a></p>
<p><a href="https://www.datadoghq.com/blog/delivery-hero-kubernetes-cost-optimization/">How Delivery Hero uses Kubecost and Datadog to manage Kubernetes costs in the cloud.</a></p>
<p>An emerging buzzword for data platforms capable of both transactions and analytics workloads – “translytical.” A webinar from SingleStore describes precisely such platforms.<sup>7</sup></p>


<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;<a href="https://www.singlestore.com/blog/webinar-recap-real-time-data-and-the-state-of-translytical-platforms/">Webinar Recap: Real-Time Data and the State of Translytical Platforms</a></p></div></div></section>


 ]]></description>
  <guid>https://www.eliasnema.com/posts/newsletter/2023-03-03.html</guid>
  <pubDate>Fri, 03 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.eliasnema.com/posts/df2-small.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Data Feed #3</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2023-02-23.html</link>
  <description><![CDATA[ 





<section id="learning" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="learning">Learning</h2>
<p>Compilation of the best Scylla articles and use-cases.<sup>1</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;<a href="https://www.scylladb.com/2023/02/21/scylladb-innovation-awards-honor-impressive-nosql-rust-low-latency-achievements/">ScyllaDB Innovation Awards + Rust Low-Latency Achievements</a></p></div><div id="fn2"><p><sup>2</sup>&nbsp;<a href="https://www.eliasnema.com/data-feed/2023-02-23.html#fn2">CrateDB aggregations</a></p></div></div><p>Addition to the CrateDB: <code>max/min_by(expr1, expr2)</code> - returns the value of an <code>expr1</code> associated with the max/min value of <code>expr2</code> in a group.<sup>2</sup></p>
<p><a href="https://redpanda.com/blog/build-streaming-data-pipeline-upsolver">How to build streaming data pipelines with Redpanda and Upsolver SQLake.</a></p>
<p><a href="https://aws.amazon.com/blogs/database/query-data-with-dynamodb-shell-a-command-line-interface-for-amazon-dynamodb/">Query data with DynamoDB Shell – a command line interface for Amazon DynamoDB</a></p>
<p>I first learned about Frits Hoogland from the world of Oracle. Now he is with YugabyteDB, and here is his profile in the person of the week <sup>3</sup> and an article from him about the high availability in Yugabyte.<sup>4</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;<a href="https://postgresql.life/post/frits_hoogland/">PostgreSQL Person of the Week - Frits Hoogland</a></p></div><div id="fn4"><p><sup>4</sup>&nbsp;<a href="https://dev.to/yugabyte/yugabytedb-how-does-a-master-deal-with-ha-o0p">YugabyteDB: how does a master deal with HA</a></p></div></div><p><a href="https://www.yugabyte.com/blog/distributed-database-transactional-consistency-async-standby/">Can Distributed Databases Achieve Transactional Consistency on Async Standbys? Yes, They Can.</a></p>
</section>
<section id="hacking" class="level2">
<h2 class="anchored" data-anchor-id="hacking">Hacking</h2>
<p>Postgres System Columns Explained (ctid, xmin,xmax) </p><div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/AveRgUrC7FM" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div><p></p>
<p>Index “do it yourself” - a 2020 PGCon talk from <a href="https://twitter.com/x4mmmmmm">Andrey Borodin</a>, plus you’ll get to know the scale of Postgres at Yandex.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/NUJMcIwu9VY" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="visualization" class="level2">
<h2 class="anchored" data-anchor-id="visualization">Visualization</h2>
<p><a href="https://grafana.com/blog/2023/02/24/introducing-the-xyz-chart-a-three-dimensional-way-to-visualize-your-data-in-grafana/">Introducing the XYZ chart: A three-dimensional way to visualize your data in Grafana.</a></p>
<p><a href="https://duckdb.org/2023/02/24/jupysql.html">JupySQL Plotting with DuckDB.</a></p>
<p><a href="https://datasette.io/tutorials/codespaces">Using Datasette in GitHub Codespaces.</a></p>
<p><a href="https://simonwillison.net/2023/Feb/17/analytics/">Analytics: Hacker News v.s. a tweet from Elon Musk.</a></p>
</section>
<section id="deep-dive" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="deep-dive">Deep Dive</h2>
<p>Practical walk-through on data modelling of IMDb dataset for the DynamoDB.<sup>5</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;<a href="https://aws.amazon.com/blogs/database/data-modelling-for-an-internet-scale-online-transactional-system-using-amazon-dynamodb/">Data modelling for an internet-scale online transactional system using Amazon DynamoDB</a></p></div><div id="fn6"><p><sup>6</sup>&nbsp;<a href="https://materialize.com/blog/materialize-architecture/">The Software Architecture of Materialize</a></p></div></div><p>Materialize is a SQL database built on top of streming solutions, here is a peek into the architecture.<sup>6</sup></p>
<p>Great Spark benchmarks for shuffle-intensive workloads.<sup>7</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;<a href="https://aws.amazon.com/blogs/big-data/amazon-emr-serverless-supports-larger-worker-sizes-to-run-more-compute-and-memory-intensive-workloads/">Amazon EMR Serverless supports larger worker sizes to run more compute and memory-intensive workloads</a></p></div></div><p><a href="http://smalldatum.blogspot.com/2023/02/sysbench-arm-x86-public-cloud.html">Sysbench, Arm &amp; x86, public cloud.</a></p>
</section>
<section id="business" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="business">Business</h2>
<p>Will artificial intelligence eat software and why invest in the database market?.<sup>8</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;<a href="https://www.datastax.com/blog/premji-invest-ai-future">Premji Invest: Artificial Intelligence Will Eat Software</a></p></div><div id="fn9"><p><sup>9</sup>&nbsp;<a href="https://www.snowflake.com/blog/startup-spotlight-api-on-top-of-snowflake-propel/">Startup Spotlight: APIs on Top of Snowflake with Propel</a></p></div></div><p>Interesting company building an API platform for developers to build apps on top of their data easier.<sup>9</sup></p>


</section>


 ]]></description>
  <guid>https://www.eliasnema.com/posts/newsletter/2023-02-23.html</guid>
  <pubDate>Thu, 23 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.eliasnema.com/posts/df2-small.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Data Feed #2</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2023-02-17.html</link>
  <description><![CDATA[ 





<section id="learning" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="learning">Learning</h2>
<p>Fantastic content all around from both days of the ScyllaDB Summit: <a href="https://www.scylladb.com/2023/02/15/scylladb-summit-day-1-nosql-at-scalewith-less/">Day 1</a>, <a href="https://www.scylladb.com/2023/02/16/scylladb-summit-day-2-continuing-the-high-performance-nosql-conversation/">Day 2</a></p>
<p><a href="https://www.cockroachlabs.com/blog/distributed-transactions-what-why-and-how-to-build-a-distributed-transactional-application/">Distributed transactions: What, why, and how to build a distributed transactional application.</a></p>
<section id="replication" class="level4">
<h4 class="anchored" data-anchor-id="replication">Replication</h4>
<ul>
<li><p><a href="https://aws.amazon.com/blogs/database/improve-logical-replication-performance-in-amazon-aurora-postgresql-with-the-new-write-through-cache/">Improve logical replication performance in Amazon Aurora PostgreSQL with the new write-through cache.</a></p></li>
<li><p><a href="https://docs.dolthub.com/guides/binlog-replication">Dolt binlog replication from a MySQL or MariaDB.</a></p></li>
</ul>
</section>
<section id="tips" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="tips">Tips</h4>
<ul>
<li><p>Working with JSON data, using monitoring, and connecting to Dremio in SingleStoreDB.<sup>1</sup></p></li>
<li><p>Data modelling and queries considerations at RavenDB.<sup>2</sup></p></li>
<li><p><a href="https://crate.io/blog/guide-to-sharding-and-partitioning-best-practices-in-cratedb">Guide to sharding and partitioning best practices in CrateDB.</a></p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;<a href="https://www.singlestore.com/blog/developer-quick-tips/">Developer Quick Tips</a></p></div><div id="fn2"><p><sup>2</sup>&nbsp;<a href="https://ravendb.net/articles/recording-ravendb-usage-patterns">Recording: RavenDB Usage Patterns</a></p></div></div></section>
</section>
<section id="hacking" class="level2">
<h2 class="anchored" data-anchor-id="hacking">Hacking</h2>
<p>As always fantastic and informative video from <a href="https://twitter.com/x4mmmmmm">Andrey Borodin</a> about detailed buffers statistics in EXPLAIN BUFFERS:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/36n49jjfPo8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
</section>
<section id="deep-dive" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="deep-dive">Deep Dive</h2>
<p>Insightful analysis of implementing comparing data sampling implementation in DB versus on the client.<sup>3</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;<a href="https://www.timescale.com/blog/downsampling-in-the-database-how-data-locality-can-improve-data-analysis/">Downsampling in the Database: How Data Locality Can Improve Data Analysis</a></p></div><div id="fn4"><p><sup>4</sup>&nbsp;<a href="https://clickhouse.com/blog/five-methods-of-database-obfuscation">Five Methods For Database Obfuscation</a></p></div></div><p>Article from Alexey Milovidov himself, that stretches over quite a long period of time and describes ClickHouse journey to the data obfuscation.<sup>4</sup></p>
<p>Short a sweet deep dive into Postgres Write Ahead Log (WAL) files and Log Sequence numbers (LSN).<sup>5</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;<a href="https://www.crunchydata.com/blog/postgres-wal-files-and-sequuence-numbers">Postgres WAL Files and Sequence Numbers</a></p></div></div></section>
<section id="business" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="business">Business</h2>
<p><a href="https://www.cockroachlabs.com/blog/real-money-gaming-cost-savings/">Real-money gaming company saves $1.5 million per regional expansion with CockroachDB.</a></p>
<p>A very interesting case from a <a href="https://everactive.com">company</a> producing batteryless sensors, that continuously stream data used in all kind of manufactoring industries (chemical processing, district energy, rotating equipment – motors, pumps, fans, compressors, etc.)<sup>6</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;<a href="https://www.timescale.com/blog/how-everactive-powers-a-dense-sensor-network-with-virtually-no-power-at-all/">How Everactive Powers a Dense Sensor Network With Virtually No Power at All</a></p></div></div><p><a href="https://influx.com/blog/year-summary-2022">Influx year in review 2022.</a></p>


</section>


 ]]></description>
  <guid>https://www.eliasnema.com/posts/newsletter/2023-02-17.html</guid>
  <pubDate>Fri, 17 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.eliasnema.com/posts/df2-small.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Data Feed #1</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2023-02-10.html</link>
  <description><![CDATA[ 





<section id="learning" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="learning">Learning</h2>
<p><a href="https://twitter.com/andy_pavlo">The Professor</a> explains how the replication works in AWS RDS and Aurora at the high level.<sup>1</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;<a href="https://ottertune.com/blog/how-amazon-rds-replication-works-and-why-the-faas-database-problem-wont-happen-in-aws/">How Amazon RDS Replication Works and Why the FAA’s Database Problem Won’t Happen in AWS</a></p></div><div id="fn2"><p><sup>2</sup>&nbsp;<a href="https://planetscale.com/blog/migrating-from-postgres-to-mysql">Migrating from Postgres to MySQL</a></p></div></div><p>Great guide about what to look at when migrating from Postgres to MySQL.<sup>2</sup></p>
<p><a href="https://redis.com/blog/database-developers-conferences-2023/">The Top Conferences for Database Developers to Attend in 2023.</a></p>
</section>
<section id="hacking" class="level2">
<h2 class="anchored" data-anchor-id="hacking">Hacking</h2>
<p>Wonderful 101 PostgreSQL hacking with implementing two simple patches live.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/samLkrC5xQA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<iframe width="560" height="315" src="https://www.youtube.com/embed/YPq_hiOE-N8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
</section>
<section id="deep-dive" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="deep-dive">Deep Dive</h2>
<p><a href="https://twitter.com/muratdemirbas">Murat</a> looks at a <a href="https://stratos.seas.harvard.edu/files/stratos/files/rum.pdf">The RUM Conjecture paper</a>, describing read times/update cost/memory overhead trade-offs.<sup>3</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;<a href="http://muratbuffalo.blogspot.com/2023/02/designing-access-methods-rum-conjecture.html">Designing Access Methods: The RUM Conjecture</a></p></div></div></section>
<section id="history" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="history">History</h2>
<p>Graphs are at their peak popularity and (machine) learning overtook (data) mining in the analysis of words in database papers.<sup>4</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;<a href="https://databasearchitects.blogspot.com/2023/02/five-decades-of-database-research.html?m=1">Five Decades of Database Research</a></p></div></div><p><a href="https://www.timescale.com/blog/timescale-timeout-the-history-and-basics-of-postgresql-part-i/">The History and Basics of PostgreSQL.</a></p>
</section>
<section id="tutorials" class="level2">
<h2 class="anchored" data-anchor-id="tutorials">Tutorials</h2>
<p><a href="https://redpanda.com/blog/introduction-apache-camel-redpanda">Getting started with Apache Camel and Redpanda.</a></p>
<p><a href="https://www.scylladb.com/2023/02/08/scylladb-summit-preview-through-the-speakers-eyes/">ScyllaDB Summit Preview: Through the Speakers’ Eyes.</a></p>
<p><a href="https://www.dolthub.com/blog/2023-02-08-dolt-for-gamedev/">Version control for Video Game Development using Dolt.</a></p>
<p><a href="https://www.cockroachlabs.com/blog/what-is-data-partitioning-and-how-to-do-it-right/">What is data partitioning, and how to do it right.</a></p>
</section>
<section id="business" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="business">Business</h2>
<p>A good sneak peek into designing a payment processor from the database perspective.<sup>5</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;<a href="https://www.cockroachlabs.com/blog/cockroachdb-payments-system-architecture/">How to build a payments system that scales to infinity (with examples)</a></p></div><div id="fn6"><p><sup>6</sup>&nbsp;<a href="https://www.youtube.com/watch?v=LTpVTr0yLZo">RedisDays India: Redis Beyond Cache for E-Commerce</a></p></div></div><p>Learn how Meesho uses Redis (and not only) to achieve 30ms p99 latency with &gt; 1M peak requests per second.<sup>6</sup></p>


</section>


 ]]></description>
  <guid>https://www.eliasnema.com/posts/newsletter/2023-02-10.html</guid>
  <pubDate>Fri, 10 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.eliasnema.com/posts/df2-small.png" medium="image" type="image/png"/>
</item>
<item>
  <title>History (of Data Platforms and Apps)</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2020-10-06-newsletter-data-platforms.html</link>
  <description><![CDATA[ 





<section id="history-of-data-platforms-and-apps" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="history-of-data-platforms-and-apps">History (of Data Platforms and Apps)</h2>
<p>What’s the history of data-intensive applications and how did we end in a state where machines can classify cats better than us?</p>
<section id="softhardware-history-through-the-lens-of-ai" class="level3">
<h3 class="anchored" data-anchor-id="softhardware-history-through-the-lens-of-ai">[Soft/Hard]ware History through the Lens of AI</h3>
<p>An <a href="https://hardwarelottery.github.io/">interesting take at</a> a hardware-software intersection through the lens of AI applications. Some things that I found particularly fascinating:</p>
<blockquote class="blockquote">
<p>This essay begins by acknowledging a crucial paradox: machine learning researchers mostly ignore hardware despite the role it plays in determining what ideas succeed.</p>
</blockquote>
<ul>
<li>Computing started with <strong>single-purpose</strong> machines.</li>
<li>Then, in 1969, the general-purpose era began. This meant any move for the application-specific hardware was economically unfeasible because the <strong>performance benefit would fade away</strong> within 1-2 years with an ever-increasing number of transistors.</li>
</ul>
<blockquote class="blockquote">
<p>The few attempts to deviate and produce specialized supercomputers for research were financially unsustainable and short-lived.</p>
</blockquote>
<ul>
<li>However, there was a silver lining for specialized hardware. <strong>Von Neumann Bottleneck</strong> — the available compute is restricted by “the lone channel between the CPU and memory along which data has to travel sequentially”. Hence, in the 2000s GPUs were repurposed to be used with ML applications.</li>
<li>In 2012 Google <a href="https://arxiv.org/abs/1112.6209">used <strong>16,000 CPU cores to classify cats</strong></a>. In a year, the same task <a href="http://proceedings.mlr.press/v28/coates13.html">was completed with only <strong>2 CPU cores and 4 GPUs</strong></a>.</li>
<li>Hardware is only economically viable if the lifetime of the use case <strong>lasts more than three years</strong>. Hence, it already makes sense to build specific hardware for matrix multiplication for quite some time. Next come the unstructured sparsity and weight-specific quantization (what GPU manufacturers <a href="https://developer.nvidia.com/blog/nvidia-ampere-architecture-in-depth/">are recently doing</a>).</li>
<li>The rate of return for additional parameters is decreasing (e.g.&nbsp;Inception V3/ V4: <strong>21.8 vs 41.1 million parameters, 78.8 vs 80 % accuracy</strong>).</li>
<li>The training costs of GPT-3 is estimated to exceed <strong>$12 million dollars.</strong></li>
</ul>
</section>
<section id="a-brief-history-of-machine-learning-platforms" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="a-brief-history-of-machine-learning-platforms">A Brief History of Machine Learning Platforms</h3>
<p>No Hadoop, no AWS — barbarian days. Check out the <a href="https://databaseline.tech/a-brief-history-of-ml-platforms/">full timeline here</a>, it’s quite fun.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.eliasnema.com/posts/newsletter/2020-10-06-ml-history-start.png" class="figure-img" width="300"></p>
<figcaption class="margin-caption">Pre-cloud Timeline</figcaption>
</figure>
</div>
</section>
<section id="is-data-hype-real" class="level3">
<h3 class="anchored" data-anchor-id="is-data-hype-real">Is Data Hype Real</h3>
<p><a href="https://medium.com/northzone/unpacking-the-data-hype-8c3a0ae63564">Another article</a> looking at different branches developed in a field of modern data processing. Describes prominent players in areas of data pipelines, catalogs, collaboration and quality.</p>
<blockquote class="blockquote">
<p><em>In 2010, the number of large enterprises with a Chief Data Officer (CDO) was 15. By&nbsp;<a href="https://medium.com/datapace/the-number-of-chief-data-officer-is-rising-but-this-role-is-still-unclear-be6add07315b">2017, it was up to 4,000</a>. In 2020, it’ll be over 10,000. Why? Data is revenue and revenue is sexy.</em></p>
</blockquote>
</section>
<section id="state-of-ai" class="level3">
<h3 class="anchored" data-anchor-id="state-of-ai">State of AI</h3>
<p>Yearly <a href="https://www.stateof.ai/">state of the AI report</a>. Here are some excerpts from the executive summary (page 7 of the report):</p>
<ul>
<li>The hottest area in AI: still <strong>NLP</strong></li>
<li>Closed AI — only <strong>15%</strong> of papers publish their code</li>
<li>Biology starts to benefit from AI (the <strong>first AI discovered drug</strong>)</li>
<li>Corporate-driven academic <strong>brain drain</strong></li>
<li><strong>US and China</strong> lead the AI research</li>
<li>Specialized hardware investments (see the hardware lottery article above). <strong>Semiconductor companies</strong> become more and more important.</li>
<li>Two <strong>wrong arrests</strong> using facial recognition.</li>
</ul>
</section>
</section>
<section id="ml-ops" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="ml-ops">ML Ops</h2>
<p>One of the hottest buzzwords in a room. However, I believe, this (and not the mysterious ML platforms) will <strong>close the gap in the adoption of ML applications and bring the power of data to the rest of us.</strong></p>
<section id="microsoft" class="level3">
<h3 class="anchored" data-anchor-id="microsoft">Microsoft</h3>
<p>Microsoft continues to do an amazing job for the ML community. Now with the GitHub as well. There is a <a href="https://github.blog/2020-10-01-keeping-your-data-pipelines-healthy-with-the-great-expectations-github-action/">second part</a> (<a href="https://github.blog/2020-06-17-using-github-actions-for-mlops-data-science/">part 1</a>) of the series related to the ML Ops — what data ops should have become. Integration with github actions is amazing and now supports The Great Expectations <a href="https://github.com/marketplace/actions/great-expectations-data">action</a> (which is an awesome <a href="https://greatexpectations.io/">project</a> in itself). &gt; <em>GitHub Actions don’t just do CI/CD, they provide powerful and flexible automation for ML engineers and data scientists.</em></p>
</section>
<section id="whylogs" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="whylogs">WhyLogs</h3>
<p>Much of the difficulty in maintaining an ML system comes from data drift. <a href="https://medium.com/whylabs/whylogs-embrace-data-logging-a9449cd121d">WhyLogs</a> calculates approximate statistics for datasets of any size up to TB-scale. Available in both Python and Java.</p>
<p>Here is a data distribution over time from the <a href="https://www.notion.so/771525fbe58c4151a79e8711a99f0fab">example</a> walkthrough:</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.eliasnema.com/posts/newsletter/2020-10-06-why-logs.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">why-logs</figcaption>
</figure>
</div>


</section>
</section>

 ]]></description>
  <category>data-meets-product</category>
  <guid>https://www.eliasnema.com/posts/newsletter/2020-10-06-newsletter-data-platforms.html</guid>
  <pubDate>Mon, 05 Oct 2020 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Democracy and Efficiency</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2020-09-28-newsletter-democracy-efficiency.html</link>
  <description><![CDATA[ 





<section id="democracy-and-efficiency" class="level2">
<h2 class="anchored" data-anchor-id="democracy-and-efficiency">Democracy and Efficiency</h2>
<p>The AI has already proven to work well for many tasks that were not possible to tackle with computers before. Now we’ve entered the scaling phase to make it:</p>
<ul>
<li>as accessible as possible (developer tools, explainability, the <strong>“democratization of ML”</strong>) and</li>
<li>putting it on as many devices (<strong>model efficiency</strong>) as possible.</li>
</ul>
<p>Hence, more and more ready-to-use recipes are created, frameworks are hiding complexity, and, pre-built models are optimized and ready to be served on all kind of devices.</p>
</section>
<section id="recommendations" class="level2">
<h2 class="anchored" data-anchor-id="recommendations">Recommendations</h2>
<section id="tfrs" class="level3">
<h3 class="anchored" data-anchor-id="tfrs">TFRS</h3>
<p>This one is huge for the RecSys community. Google adds recommendations package into the tensorflow, <em>that makes building, evaluating, and serving sophisticated recommender models easy</em> (this is to the point of democracy).</p>
<p>This also involves <a href="https://twitter.com/maciej_kula?lang=en">Maciej Kula</a>, author of a couple of hugely popular reco libraries: <a href="https://github.com/lyst/lightfm">LightFM</a> and <a href="https://github.com/maciejkula/spotlight">Spotlight</a>. So it promises to be a very elegant API.</p>
<p>And you can see how easy it is to create even a <a href="https://www.tensorflow.org/recommenders/examples/multitask">multitask-system</a>. Here is a code snippet to define two learning tasks, one to predict ratings, another to predict the amount of relevant movies:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">tfrs.tasks.Ranking(</span>
<span id="cb1-2">    loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.keras.losses.MeanSquaredError(),</span>
<span id="cb1-3">    metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[tf.keras.metrics.RootMeanSquaredError()],</span>
<span id="cb1-4">)</span>
<span id="cb1-5"></span>
<span id="cb1-6">tfrs.tasks.Retrieval(</span>
<span id="cb1-7">    metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tfrs.metrics.FactorizedTopK(</span>
<span id="cb1-8">        candidates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>movies.batch(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb1-9">    )</span>
<span id="cb1-10">)</span></code></pre></div>
<p>Then you can combine these tasks while computing the loss and adjust the weight accordingly. It’s like Lego for recommendations.</p>
</section>
<section id="linkedins-intents" class="level3">
<h3 class="anchored" data-anchor-id="linkedins-intents">LinkedIn’s Intents</h3>
<p>A couple of years ago, LinkedIn has joined a cohort of companies that are doing recommendations by intent (members, pages, hashtags, newsletters, etc. in this case) on the main page. Here is a <a href="https://engineering.linkedin.com/blog/2020/helping-members-discover-communities-around-interests">story of how they did it</a>. Some highlights:</p>
<ul>
<li><strong>UI framework:</strong> to be able to quickly switch between recommendation types in the frontend, a unified framework for all the platforms.</li>
<li><strong>[Micro]-Services:</strong> different services for different recommendations with a unified ranker component on top of them. Allows to quickly plug-and-play different algorithms.</li>
<li><strong>Unified tracking:</strong> so often overlooked but such an important mention.</li>
</ul>
</section>
</section>
<section id="efficiency" class="level2">
<h2 class="anchored" data-anchor-id="efficiency">Efficiency</h2>
<section id="nvidia" class="level3">
<h3 class="anchored" data-anchor-id="nvidia">NVIDIA</h3>
<p>Following-up on the <a href="https://www.eliasnema.com/data-meets-product/2020/09/22/newsletter-video.html">last week’s video topic</a>. Building an ML application on top of a video stream is not something easy and requires expertise in multiple domains. So <a href="https://developer.nvidia.com/blog/deploying-models-from-tensorflow-model-zoo-using-deepstream-and-triton-inference-server/">NVIDIA wants to help</a> you make deployment of such kind of applications easier. This also falls into the <strong>“democratize”</strong> suit. Here is an excerpt from <a href="https://developer.nvidia.com/blog/implementing-a-real-time-ai-based-face-mask-detector-application-for-covid-19/">their other article</a>, explaining how to build a real-time face-mask detector application:</p>
<blockquote class="blockquote">
<p>To use TLT [NVIDIA’s transfer learning tool] and DeepStream you do not necessarily have to know all the concepts in depth, such as transfer learning, pruning, quantization, and so on. These simple toolkits abstract away the complexities, allowing you to focus on your application.</p>
</blockquote>
<p>So the modern-day workflow for the AI video app can look like this:</p>
<pre class="text"><code>Download a pretrained model
            |
            |--&gt; Get data for your use case
                        |
                        |--&gt; Retrain (Transfer learning) &amp; Prune
                                    |
                                    |--&gt; Export model and use with DeepStream library</code></pre>
<p>I want to point the <code>Prune</code> part, which is becoming more and more relevant for the production systems. And there are many ways to do it, some I’ve covered in a <a href="https://www.eliasnema.com/data-meets-product/2020/07/20/newsletter-gpt.html">previous post</a>, but you can also check <a href="https://developer.nvidia.com/blog/transfer-learning-toolkit-pruning-intelligent-video-analytics/">NVIDIA’s blog post</a>.</p>
<p>Why is it important? For example, in the face-mask detection example running on a Jetson Nano after pruning the mean average precision has <strong>dropped from 86.12 to 85.5%</strong>, while frames per second <strong>increased more than 3 times</strong> — from 6.5 to 21.25.</p>
<p>This doesn’t even feel like a trade-off!</p>
<p>Here is also a free course from them to get started with video analytics: <a href="https://courses.nvidia.com/courses/course-v1:DLI+C-IV-02+V1/about">Getting Started with DeepStream for Video Analytics on Jetson Nano</a>.</p>
</section>
<section id="tflites-nlp" class="level3">
<h3 class="anchored" data-anchor-id="tflites-nlp">TFLITE’s NLP</h3>
<p>And more on the topic of efficiency. Google has <a href="https://blog.tensorflow.org/2020/09/whats-new-in-tensorflow-lite-for-nlp.html">added many things around NLP into the TF Lite</a>.</p>
<p>So that it’s easier to do things like that in your browser: <img src="https://www.eliasnema.com/posts/newsletter/2020-09-29-bert-browser.png" class="img-fluid" alt="bert-browser"></p>
<p><em>Image from <a href="https://blog.tensorflow.org/2020/03/exploring-helpful-uses-for-bert-in-your-browser-tensorflow-js.html">this blog post</a> about the in-browser BERT.</em></p>
<p>And these capabilities are also unlocked by the pruning and quantization. Just take a look at how much more efficient the model becomes after losing only a fraction in accuracy: <img src="https://www.eliasnema.com/posts/newsletter/2020-09-29-bert-lite.png" class="img-fluid" alt="bert-lite"></p>
</section>
</section>
<section id="pixar" class="level2">
<h2 class="anchored" data-anchor-id="pixar">Pixar</h2>
<p>And after some philosophy let’s end when it’s best. If you always wondered how would you look like a Pixar character, now you have a chance <a href="https://toonify.justinpinkney.com/">to see that</a>. As well as an informative <a href="https://www.youtube.com/watch?v=KZ7BnJb30Cc">conversation with its creator</a>.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Blending humans and cartoons using <a href="https://twitter.com/Buntworthy?ref_src=twsrc%5Etfw"><span class="citation" data-cites="Buntworthy">@Buntworthy</span></a>'s Google Colab notebook. Thank you for that, it's awesome. Here is a YouTube version of this video: <a href="https://t.co/7bUd7nXaX3">https://t.co/7bUd7nXaX3</a> <a href="https://t.co/iG09lpEAXX">pic.twitter.com/iG09lpEAXX</a>
</p>
— Doron Adler (<span class="citation" data-cites="Norod78">@Norod78</span>) <a href="https://twitter.com/Norod78/status/1297513475258953728?ref_src=twsrc%5Etfw">August 23, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


</section>

 ]]></description>
  <category>data-meets-product</category>
  <guid>https://www.eliasnema.com/posts/newsletter/2020-09-28-newsletter-democracy-efficiency.html</guid>
  <pubDate>Mon, 28 Sep 2020 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Tensorflow.js, AI in Video and Analytics</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2020-09-22-newsletter-video.html</link>
  <description><![CDATA[ 





<section id="ml-in-the-browser" class="level2">
<h2 class="anchored" data-anchor-id="ml-in-the-browser">ML in the Browser</h2>
<p>What can you do with ML in a modern browser? A showcase from the TensorFlow.js community. My personal favorites were:</p>
<ul>
<li><p><a href="https://demos.touch-less.dev/">Touch-less interface for your hand</a>. It takes some time to get used to it and there is still some polishing to be made. However, after a bit of practice, it becomes kind of fun.</p></li>
<li><p><a href="https://enjoyingthe.show/#explainer">Analyze emotions of your audience in real-time</a>, so that your amazing jokes no longer end in awkwardly muted silence.</p></li>
</ul>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/fZ1rzawCPD4?controls=0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
</section>
<section id="ai-in-video" class="level2">
<h2 class="anchored" data-anchor-id="ai-in-video">AI in Video</h2>
<ul>
<li><p><a href="https://www.synthesia.io/">Synthesia</a> — a new service to generate video-content:</p>
<ul>
<li>Chose from predefined narrators</li>
<li>Type the script</li>
<li>It’ll create a video of the person presenting your text in some minutes</li>
</ul></li>
<li><p><a href="https://github.com/tryolabs/norfair">Norfair</a> — an open-source library from the <a href="https://tryolabs.com/blog/2020/09/10/releasing-norfair-an-open-source-library-for-object-tracking/">Tyro-labs</a> for the object tracking (cars, pedestrians, poses).</p></li>
<li><p>And if those are not cool enough for you, how about generating realistic tennis matches with real players. <a href="https://cs.stanford.edu/~haotianz/research/vid2player/">Vid2Player</a> does exactly that. Wanted to change the grand-slam history or play Federer against Federer? Well, now you can do that:</p></li>
</ul>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GnZUIuOzgQc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<ul>
<li>And since both AI and Video require quite some compute resources and following the horrible launch of 30x cards from NVIDIA, <a href="http://timdettmers.com/2020/09/07/which-gpu-for-deep-learning/">here is a guide</a> on how to chose the one that suits you best while waiting for the cards’ availability.</li>
</ul>
</section>
<section id="analytics" class="level2">
<h2 class="anchored" data-anchor-id="analytics">Analytics</h2>
<p>Relaunch of the analytics blog at Netflix has brought two recent articles. <a href="https://netflixtechblog.com/analytics-at-netflix-who-we-are-and-what-we-do-7d9c08fe6965?source=rss----2615bd06b42e---4">The first one</a> is about the broader role of an analyst. I think this diagram is quite cool and shows the depth of what’s analytics in data organizations.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/newsletter/2020-09-22-analytics-netflix.png" class="img-fluid figure-img"></p>
<figcaption>analytics-netflix</figcaption>
</figure>
</div>
<p>In <a href="https://netflixtechblog.com/how-our-paths-brought-us-to-data-and-netflix-4eced44a6872?source=rss----2615bd06b42e---4">the other article from them</a>, there is an interview with a couple of data folks. In the spirit of:</p>
<blockquote class="blockquote">
<p>Everyone wants to build fancy models or tools, but fewer are willing to do the foundational things like cleaning the data and writing the documentation.</p>
</blockquote>
<p>Enough of Netflix. Lastly, an interesting (though quite wordy) <a href="https://counting.substack.com/p/data-cleaning-is-analysis-not-grunt">take on data cleansing</a> and why it’s not as simple as it’s often presented. I enjoy a lot the attitude from the author:</p>
<blockquote class="blockquote">
<p>TL;DR: Cleaning data is considered by some people [citation needed] to be menial work that’s somehow “beneath” the sexy “real” data science work. I call BS.</p>
</blockquote>


</section>

 ]]></description>
  <category>data-meets-product</category>
  <guid>https://www.eliasnema.com/posts/newsletter/2020-09-22-newsletter-video.html</guid>
  <pubDate>Mon, 21 Sep 2020 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Data</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2020-08-03-newsletter-data.html</link>
  <description><![CDATA[ 





<section id="metadata-medical-data-and-tf.data" class="level2">
<h2 class="anchored" data-anchor-id="metadata-medical-data-and-tf.data">Metadata, Medical Data and TF.Data</h2>
<p>Announcements in the metadata management from Shopify and Stripe. What it takes to build a startup in the field of medical AI, and how much time you’ll spend gathering data for it. TensorFlow’s latest release was mostly about its data API.</p>
</section>
<section id="ai-in-medicine" class="level2">
<h2 class="anchored" data-anchor-id="ai-in-medicine">🩺 AI in Medicine</h2>
<p>Highly recommend the <a href="https://www.datafuturology.com/podcast/2020/7/14/127-reinventing-prostate-cancer-testing-with-ai-from-development-to-regulation-to-production-with-elliot-smith-ceo-amp-founder">Data Futurology podcast</a> about what it takes to build an AI company in the medical sphere. Many interesting things, but what it takes to build real-world datasets in the wild is always worth hearing:</p>
<ul>
<li>“There is a lot of differences in medical data — if you did MRIs in two different centers, you cannot just take data from both of them and use it.”</li>
<li>“Another under-appreciated aspect of building a lot of real-world AI applications, where, unlike kaggle, nobody’s got a 100 thousand in a nicely organized folder… Sometimes only having data for 10 patients at a time, scans coming on CDs, 1 at a time.”</li>
</ul>
<blockquote class="blockquote">
<p>“As much as our system involves AI and image processing there is probably just as much if not more work in around data standardization, data cleanliness and manual intervention into data.”</p>
</blockquote>
<ul>
<li>2.5 years (from 5!) were spent on building a political relationship (with doctors), gathering data piece by piece, later building integrations with existing systems.</li>
<li>“The best results were coming from building a relationship with individual doctors.”</li>
</ul>
<p>To sum it up, I think that data gathering relationship building is <strong>the new sales</strong>. Building a company that relies on data, you are as good as the number of data providers you’ve built a relationship with.</p>
</section>
<section id="metadata" class="level2">
<h2 class="anchored" data-anchor-id="metadata">📼 Metadata</h2>
<p>Two of the big players have released something about their metadata solutions. Many of the big players already have established solutions for a couple of years, with Shopify being the latest company to build their own.</p>
<section id="shopifys-artifact" class="level3">
<h3 class="anchored" data-anchor-id="shopifys-artifact"><a href="https://engineering.shopify.com/blogs/engineering/solving-data-discovery-challenges-shopify">Shopify’s Artifact</a></h3>
<ul>
<li>Their implementation uses Elasticseach and a graph database to provide search and data lineage respectively. GraphQL’s Apollo as an API layer. Quite a standard stack. Similar to e.g.&nbsp;<a href="https://lyft.github.io/amundsen/architecture/">this one</a>.</li>
<li>Other than that, from the screenshots it looks like it does what it should and looks very much like similar systems. However, a quote from the article explaining why it’s generally hard to reuse existing solutions:</li>
</ul>
<blockquote class="blockquote">
<p>Every organization’s data stack is different. While some upstream processes can be standardized and cataloged appropriately, the business context of downstream processes creates a wide distribution of requirements that are near impossible to satisfy with a one-size-fits-all solution.</p>
</blockquote>
</section>
<section id="stripe-and-privacy" class="level3">
<h3 class="anchored" data-anchor-id="stripe-and-privacy">Stripe and Privacy</h3>
<p><a href="https://developer.squareup.com/blog/using-amundsen-to-support-user-privacy-via-metadata-collection-at-square/">Stripe is using</a> their <a href="https://lyft.github.io/amundsen/">Amundsen</a> metadata tool to increase focus on consumer privacy and better comply with GDPR and CCPA.</p>
</section>
<section id="other-companies" class="level3">
<h3 class="anchored" data-anchor-id="other-companies">Other companies</h3>
<p>A collection of <a href="https://github.com/eugeneyan/applied-ml">data discovery articles</a>.</p>
</section>
</section>
<section id="tensorflow-2.3" class="level2">
<h2 class="anchored" data-anchor-id="tensorflow-2.3">🖇 Tensorflow 2.3</h2>
<p>Ironically the <a href="https://blog.tensorflow.org/2020/07/whats-new-in-tensorflow-2-3.html">latest TensorFlow release</a> is also about data. Two of the main additions to the help make preprocessing smoother. I think preprocessing may very well be the most overlooked step and improving it is hugely beneficial.</p>
<ul>
<li><strong>td.data.snapshot</strong>: allows you to run the preprocessing pipeline once, save the output and play with parameter optimization on top of that. Read more details in the <a href="https://github.com/tensorflow/community/blob/master/rfcs/20200107-tf-data-snapshot.md">RFC</a>.</li>
<li><strong><a href="https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing?version=nightly">Preprocessing layer API</a></strong>: package preprocessing logic inside a model for easier deployment.</li>
</ul>
<hr>
<p><br></p>
<p>To finish on a positive note, here is an awesome 3 minutes <a href="https://www.youtube.com/watch?v=kpiY_LemaTc">Lex Fridman’s video</a> estimating costs for GPT to equal a human brain:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/newsletter/2020-08-03.png" class="img-fluid figure-img"></p>
<figcaption>gpt costs</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>data-meets-product</category>
  <guid>https://www.eliasnema.com/posts/newsletter/2020-08-03-newsletter-data.html</guid>
  <pubDate>Sun, 02 Aug 2020 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Paid Search</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2020-07-28-newsletter-search.html</link>
  <description><![CDATA[ 





<p>This week I ended up reading a couple of recent articles around the topic of search. Not groundbreaking paper’s style. Rather down-to-earth field implementations. Below, I’ll go through the paid search challenges in two major online platforms. And then to the emerging role of a Relevance Engineer.</p>
<section id="pinterest" class="level2">
<h2 class="anchored" data-anchor-id="pinterest"><img src="https://www.eliasnema.com/posts/newsletter/pinterest.png" width="35"> Pinterest</h2>
<p><a href="https://medium.com/pinterest-engineering/driving-shopping-upsells-from-pinterest-search-d06329255402">Shopping upsells on Pinterest</a>. An interesting story. Let me decompose it to the common steps seen across data projects.</p>
<p>A simple problem to solve — introduce ads into the search results. They call it “shopping upsells“. Imagine you need to build a shopping upsell model.</p>
<section id="step-1.-get-data." class="level3">
<h3 class="anchored" data-anchor-id="step-1.-get-data.">Step 1. Get Data.</h3>
<p>Where to get the data for a feature that doesn’t yet exist on a platform?</p>
<ul>
<li>One approach: randomly display a portion of upsells for all queries. However, this way the product quality is mixed with the user intent for shopping — not clear if the user doesn’t want to buy in general or doesn’t like this particular ad.</li>
<li>A better approach: <em>embed products in both upsell and organic sections</em>, but hide prices in organic. This way is possible to distill the intent of a user and make data less noisy.</li>
</ul>
</section>
<section id="step-2.-get-model." class="level3">
<h3 class="anchored" data-anchor-id="step-2.-get-model.">Step 2. Get Model.</h3>
<p>You’ve got data, get a model.</p>
<ul>
<li>Use business knowledge to come up with a smart objective. Clicks on products are usually noisy, but a good first start. Much better to assign proper weights to strong signals and smartly combine them. Pinterest uses pins and clicks to partner sites.</li>
<li><a href="https://miro.medium.com/max/300/0*kI9UvZRbnPFM1RJ2">Model architecture</a>:<br>
<code>Query -&gt; Embedding -&gt; Encoder -&gt; Dense -&gt; Log Loss</code></li>
</ul>
<p>New practitioners are often disappointed by seeing simple architectures after all the resnets and RNNs they’ve just studied. But complexity and state-of-the-arts are often wrong fallacies to chase for most of the businesses.</p>
</section>
<section id="step-3a.-get-results." class="level3">
<h3 class="anchored" data-anchor-id="step-3a.-get-results.">Step 3a. Get Results.</h3>
<blockquote class="blockquote">
<p>“After launching the experiment, the model increased more than 2X traffic to the shopping search page without hurting overall search metrics in terms of long clicks or saves. The model also increased more than 2X product impressions and product long clicks through the upsell.“</p>
</blockquote>
</section>
<section id="step-3b.-hack-production." class="level3">
<h3 class="anchored" data-anchor-id="step-3b.-hack-production.">Step 3b. Hack Production.</h3>
<p>Having the results you now need to hack the costs to get the “model economics” right.</p>
<ul>
<li>For example, they are smartly precomputing head queries and filtering out “non-shoppable categories, such as ‘recipe’ or ‘finance’.”</li>
</ul>
<p>My bet is that Pinterest didn’t come up with these optimizations from the beginning. Usually, it’s a loop of 2-3b steps until you get all the components right. This often-overlooked cycle of small adjustments, in this case, allowed to reduce model serving traffic by 70% 🤯</p>
</section>
</section>
<section id="ebay" class="level2">
<h2 class="anchored" data-anchor-id="ebay"><img src="https://www.eliasnema.com/posts/newsletter/ebay.png" width="35"> Ebay</h2>
<p><a href="https://tech.ebayinc.com/product/ebay-makes-promoted-listings-in-search-results-more-relevant-and-dynamic/">Ebay’s article</a> on balancing paid and non-paid content in their search results.</p>
<p>The basic idea is that having fixed paid slots is bad. Both for the:</p>
<ul>
<li><em>head queries</em>, for which there is much more paid content than it’s possible to fit</li>
<li>as well as <em>tail queries</em>, for which there is often not enough high-quality paid content</li>
</ul>
<p>The solution? Get rid of the fixed paid slots and rank the whole search result according to “relevancy“. Here is a more detailed summary:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
<a href="https://twitter.com/ebaytech?ref_src=twsrc%5Etfw"><span class="citation" data-cites="ebaytech">@ebaytech</span></a> has recently released an article on balancing the paid and non-paid content in their search result page (thread)⁰<a href="https://twitter.com/hashtag/ecommerce?src=hash&amp;ref_src=twsrc%5Etfw">#ecommerce</a> <a href="https://twitter.com/hashtag/Search?src=hash&amp;ref_src=twsrc%5Etfw">#Search</a> <a href="https://twitter.com/hashtag/marketplace?src=hash&amp;ref_src=twsrc%5Etfw">#marketplace</a> ⁰<a href="https://t.co/REualIf6Aq">https://t.co/REualIf6Aq</a>
</p>
— Elias Nema (<span class="citation" data-cites="EliasNema">@EliasNema</span>) <a href="https://twitter.com/EliasNema/status/1286420652539424773?ref_src=twsrc%5Etfw">July 23, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</section>
<section id="ds-or-ml-re" class="level2">
<h2 class="anchored" data-anchor-id="ds-or-ml-re">🕵️‍♀️ DS or ML? RE!</h2>
<p><a href="https://opensourceconnections.com/blog/2020/07/16/what-is-a-relevance-engineer/">Another interesting take</a> on the career in the data field from one of the most famous search practitioners. A couple of highlights:</p>
<ul>
<li>Who is a relevance engineer: <em>“implements information retrieval algorithms that solve user information needs in real time, at scale“</em></li>
<li>Applied approach: <em>“don’t chase the state of the art unnecessarily, rather they prefer proven techniques for 80% of the problem“, “don’t solve search for Kaggle points or academia, but for real companies and users“</em></li>
<li>How it’s different from ML engineer: both roles are very similar, with relevance engs tending to be more user-centric and focused on IR problems (ML is broader and not necessarily user-facing problems)</li>
</ul>
<p>I think the role will become more popular going forward with many companies realizing the need and value of showing relevant content to users in an ever-shrinking customer attention span.</p>


</section>

 ]]></description>
  <category>data-meets-product</category>
  <guid>https://www.eliasnema.com/posts/newsletter/2020-07-28-newsletter-search.html</guid>
  <pubDate>Mon, 27 Jul 2020 23:00:00 GMT</pubDate>
</item>
<item>
  <title>GPT Excitement and AI Costs</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2020-07-20-newsletter-gpt.html</link>
  <description><![CDATA[ 





<section id="a-week-of-gpt-3-obviously" class="level2">
<h2 class="anchored" data-anchor-id="a-week-of-gpt-3-obviously">A Week of GPT-3, Obviously</h2>
<p>There were so many tweets, articles and general excitement that it became too much even for Sam Altman himself:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
The GPT-3 hype is way too much. It’s impressive (thanks for the nice compliments!) but it still has serious weaknesses and sometimes makes very silly mistakes. AI is going to change the world, but GPT-3 is just a very early glimpse. We have a lot still to figure out.
</p>
— Sam Altman (<span class="citation" data-cites="sama">@sama</span>) <a href="https://twitter.com/sama/status/1284922296348454913?ref_src=twsrc%5Etfw">July 19, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I’m, of course, impressed too. In fact, it was able to produce my most liked tweet 😞 (and same happened to some better-known folks):</p>
<blockquote class="twitter-tweet blockquote" data-conversation="none">
<p lang="en" dir="ltr">
Side note: if this somehow becomes my most viewed tweet ever, I'm going to be sad.
</p>
— Leo Polovets (<span class="citation" data-cites="lpolovets">@lpolovets</span>) <a href="https://twitter.com/lpolovets/status/1284288703200817153?ref_src=twsrc%5Etfw">July 18, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>There are many great articles covering GPT-3 and its meaning for the future of humanity. You can easily find them, but probably don’t need to, because they pop up everywhere.</p>
<p>Hype aside, it’s a huge model and probably costs a fortune, but the whole product part is done in a very lean way. It’s at the market validation phase, which it has nailed perfectly.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
In the ultimate lean startup twist it turned out that <a href="https://twitter.com/sama?ref_src=twsrc%5Etfw"><span class="citation" data-cites="sama">@sama</span></a> was manually answering all GPT-3 requests.
</p>
— Andreas Klinger ✌️ (<span class="citation" data-cites="andreasklinger">@andreasklinger</span>) <a href="https://twitter.com/andreasklinger/status/1283981585251880961?ref_src=twsrc%5Etfw">July 17, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Probably, the next step would be to optimize costs and <strong>make the economics right</strong> for the rest of the internet. Which brings us to the topic of costs, which becomes as relevant as never for the AI/ML community.</p>
</section>
<section id="costs-in-ai" class="level2">
<h2 class="anchored" data-anchor-id="costs-in-ai">💰Costs in AI</h2>
<ul>
<li>A very interesting conversation on last <a href="https://twimlai.com/twiml-talk-391-the-case-for-hardware-ml-model-co-designwith-diana-marculescu/">week’s TWIML AI podcast</a> about model design optimization for hardware.</li>
<li><a href="https://www.wired.com/story/prepare-artificial-intelligence-produce-less-wizardry/">Another article</a> suggests that despite shaving off 3/4 of errors in logistic optimization prediction with the help of deep learning, a European retailer chose not to use the model because of costs.</li>
</ul>
<p>Until very recently, DL has been driven by the research in big companies. This means almost unlimited resources. It’s great to validate and/or win the market. But with time, you need to get the unit economics right. For training and serving and smaller devices (a smartphone in 2017 was able to run <a href="https://arxiv.org/pdf/1611.05128.pdf">AlexNet only for 1 hour</a>).</p>
<p>Basically there are multiple directions in ML optimizations:</p>
<ul>
<li>Incorporating <a href="https://workshop-edlcv.github.io/slides/901-talk.pdf">power/energy/latency constraints</a> into network architectures search. This <em>“can bring 5‐10x improvement in energy or latency with minimal loss in accuracy or can satisfy real-time constraints for inference”</em>. Basically, by thinking about hardware constraints in advance you can get to almost the same accuracy while saving in the order of magnitudes. An amazing trade-off for most of the businesses.</li>
<li><a href="https://arxiv.org/pdf/1904.02835.pdf">Quantizing neural networks</a>. The idea here is to round model weights to the nearest power of 2, hence allowing using shift and add operations to replace the multiplications. This improves speed and lowers energy consumption. A very smart approach and again, a well-worse trade-off.</li>
<li><a href="https://openaccess.thecvf.com/content_CVPR_2020/papers/Chin_Towards_Efficient_Model_Compression_via_Learned_Global_Ranking_CVPR_2020_paper.pdf">Energy-aware pruning of NNs</a>: Often both accuracy and latency are important to the application. This work allows you to quickly iterate over accuracy-vs.-speed trade-off for finding a sweet-spot for a particular application using model compression.</li>
<li><a href="https://arxiv.org/pdf/1806.03198.pdf">Discretizing vectors over a d-dimensional sphere</a>: A super-smart approach where instead of adapting an index to the data, the data is adopted to the index itself. <em>“We learn a neural network that aims at preserving the neighborhood structure in the input space while best covering the output space (uniformly)”</em>.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/newsletter/to_uniform.png" class="img-fluid figure-img"></p>
<figcaption>to uniform</figcaption>
</figure>
</div>
<p>These are just the directions I’ve seen recently. But the topic is becoming more and more important. If AI aims to turn into a new cloud, the industry needs to figure out the ways to scale the “state-of-the-art“ to the rest of the internet. And it looks like we are finally getting there.</p>


</section>

 ]]></description>
  <category>data-meets-product</category>
  <guid>https://www.eliasnema.com/posts/newsletter/2020-07-20-newsletter-gpt.html</guid>
  <pubDate>Sun, 19 Jul 2020 23:00:00 GMT</pubDate>
</item>
<item>
  <title>No Code and ML Interns</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/newsletter/2020-07-13-newsletter-no-code.html</link>
  <description><![CDATA[ 





<p>Is no code the new oil or the old ETL? TikTok’s recommender and when to use machine learning.</p>
<section id="no-code" class="level2">
<h2 class="anchored" data-anchor-id="no-code">📵 No Code</h2>
<ul>
<li>When AWS launches a service, there is usually good economics behind it. Recently they’ve launched the <a href="https://www.honeycode.aws/">no-code way to build simple mobile apps</a>. It continues the trend started by Notion, Airtable and the likes of building your own productivity tools (of course, AWS is not competing against the Notion but rather against Microsoft Power Apps here). Spreadsheets for the new era.</li>
<li>The Russian design studio <a href="https://www.artlebedev.com/ironov/">was using AI</a> as one of their designers for more than a year. &gt; ”This event marks the moment that the mass automation of creative processes becomes a reality for businesses.”</li>
<li><a href="https://techcrunch.com/2020/07/07/monkeylearn-raises-2-2m-to-build-out-its-no-code-ai-text-analysis-service/">MonkeyLearn raises 2.2M$</a> - not really no-code AI, rather NLP as a service. &gt; “Our vision is to make AI approachable by providing a toolkit for teams to actually use AI in their daily operations,” Garreta said in a release.</li>
<li>Adobe keeps investing in its Sensei AI platform adding seamless no code <a href="https://www.adobe.com/marketing/target.html#demo">personalization and recommenders</a> based on AL and ML, of course. Allows you to automatically A/B test different content variants and more.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/newsletter/adobe_sensei.png" class="img-fluid figure-img"></p>
<figcaption>Automatically Testing Multiple Onboarding Flows with Adobe Sensei</figcaption>
</figure>
</div>
</section>
<section id="ml-applications" class="level2">
<h2 class="anchored" data-anchor-id="ml-applications">🎛 ML Applications</h2>
<ul>
<li>Facebook will <a href="https://about.fb.com/news/2020/06/prioritizing-original-news-reporting-on-facebook/">prioritize original reporting</a> in the home feed. To identify originals it will look at how often the article is cited as … original.</li>
<li><a href="https://www.producthunt.com/posts/virtual-models-by-rosebud-ai">A nice launch on ProductHunt</a> using GANs to generate models (real ones) for “photoshoots“. Even though the demo is far from perfect. But with the recent e-commerce rise, covid restrictions and all the shopify storefronts, this might be a promising direction. If the model (ML model, in this case) economy can be figured out.</li>
<li>TikTok’s recommenders are apparently really good:</li>
</ul>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
According to my teenagers, Tiktok has by far the best personalized <a href="https://twitter.com/hashtag/RecSys?src=hash&amp;ref_src=twsrc%5Etfw">#RecSys</a> they have used. Do we know anything about what they are doing?
</p>
— Xavier Amatriain - 🌈💪🏿 (<span class="citation" data-cites="xamat">@xamat</span>) <a href="https://twitter.com/xamat/status/1282467657535467520?ref_src=twsrc%5Etfw">July 13, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>And my thread about their recent article about how their recommender works:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
<a href="https://twitter.com/hashtag/Tiktok?src=hash&amp;ref_src=twsrc%5Etfw">#Tiktok</a> has posted an article about their <a href="https://twitter.com/hashtag/recommendations?src=hash&amp;ref_src=twsrc%5Etfw">#recommendations</a> system. There aren't too many details, but some interesting quotes on how they think about the problem space.<br>(1/)<a href="https://t.co/Ou8LfBGjUe">https://t.co/Ou8LfBGjUe</a>
</p>
— Elias Nema (<span class="citation" data-cites="EliasNema">@EliasNema</span>) <a href="https://twitter.com/EliasNema/status/1278803346321801217?ref_src=twsrc%5Etfw">July 2, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</section>
<section id="why-ml-is-similar-to-interns" class="level2">
<h2 class="anchored" data-anchor-id="why-ml-is-similar-to-interns">👔 Why ML is Similar to Interns</h2>
<p>Finishing with an interesting tweet from Benedict Evans:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
I quite often describe machine learning as giving you infinite interns. This can be a useful way to look at how ML would affect a product: sometimes having infinite free interns to look at data for you wouldn’t actually solve your problems, and the struggle is something else.
</p>
— Benedict Evans (<span class="citation" data-cites="benedictevans">@benedictevans</span>) <a href="https://twitter.com/benedictevans/status/1280265572782145537?ref_src=twsrc%5Etfw">July 6, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I think this is a very good summary for execs who don’t have exposure to the topic. Or for product managers when thinking about prioritization. Very often people tend to forget that ML is about <strong>automation</strong>. Imagine, you have an amazing photo-artist, who can look at the photos you take, pick the best ones, adjust brightness here and there, suggest collages, design a photo book and send to you. This is an awesome service, but also a very expensive one. How about providing it to a billion people? Hence, <strong>Google Photos</strong> cannot compete with the quality of the artist but can provide the service to a billion customers. Same goes for recommendations: a good stylist can probably get you a fashionable outfit, but economics cannot beat the recsys approach (or it can if you are a boutique).</p>
<p>On the other hand, problems where many agents won’t help, such as: shall we launch in the new market, how will customers react to a new feature? These are non-scalable problems. And even if you can and should use data to make a conscious decision there, investing in the ML solution won’t bring benefits.</p>
<p>Too often people confuse the need of <strong>scaling the decision</strong> (good for ML interns) with the need of <strong>taking a good decision from time to time</strong> (ML is of no use here).</p>


</section>

 ]]></description>
  <category>data-meets-product</category>
  <guid>https://www.eliasnema.com/posts/newsletter/2020-07-13-newsletter-no-code.html</guid>
  <pubDate>Sun, 12 Jul 2020 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Hypothesize your way into better products</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/hypothesize/hypothesize.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>How do you quickly test ideas in your product? How do you include analytics in your day-to-day development process? How do you embrace failure and stop investing in something that’s not working?</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://www.eliasnema.com/posts/hypothesize/doodle.png" width="150"></p>
</div></div><p>When really zoomed out, a common workflow in engineering teams looks like this: <strong>“Idea -&gt; Implementation.”</strong> Work is usually done in short cycles to provide fast feedback loops. But generally, you take an idea, and you implement it.</p>
<p>This comes with two dangerous assumptions:</p>
<ul>
<li>that you already know what to build; and</li>
<li>that everything that you start building needs to be built up to some final readiness.</li>
</ul>
<p>While these might have been fairly safe assumptions in some industries some years ago, it’s hard to find anything further from the truth today. Products are rapidly evolving, becoming more complex, becoming smarter. User expectations are growing at an even faster pace. It’s close to impossible to predict whether a new feature will have an impact just by relying on your gut feeling.</p>
</section>
<section id="hedge-your-risks" class="level2">
<h2 class="anchored" data-anchor-id="hedge-your-risks">Hedge your risks</h2>
<p>I’ve been working in product teams whose solutions rely heavily on data (recommendations, personalization) so that outcomes are not possible to predict (in recommenders, even offline metrics cannot give any guarantees) and iterations take a long time. In such setups, making a wrong assumption and sticking to it till the end brings the worst possible return on investments. There is also a lack of common ground in scope definitions between team members. Often, we just wanted to quickly test the feasibility of an idea, but it turned into a multi-month project that ended up being a disappointment for everyone.</p>
<p>It was clear that we needed a common language among engineering, data and product to save us from making costly bids while maximizing learnings. So we came up with a workflow that allowed us to speak the same language and that specified what the focus should be at each stage of the project.</p>
</section>
<section id="a-common-dictionary" class="level2">
<h2 class="anchored" data-anchor-id="a-common-dictionary">A common dictionary</h2>
<p><img src="https://www.eliasnema.com/posts/hypothesize/flow.png" class="img-fluid"></p>
<p>The flow starts with the <strong>hypothesis</strong>. This is a small but important difference. A hypothesis, by definition, is something that doesn’t have certainty in itself. It can be right; it can be wrong.</p>
<p>Implementation becomes three separate steps:</p>
<ul>
<li><strong>Prototype</strong>. Here you do more analysis, do some research (by this I mean just google whether you can already reuse something) and build a minimal prototype to test the hypothesis. It might require coding, but even that’s not strictly necessary. You cut all the corners to be able to test it faster.</li>
<li><strong>Experiment</strong>. Only if the prototype looks promising, start thinking about designing an experiment using it. Again, you aim at testing to collect feedback from real users as fast as possible. Sometimes, even testing it on your colleagues might give you enough information.</li>
<li><strong>Productionize</strong>. Only if the experiment ends up being positive and the ROI outweighs the potential implementation and maintenance costs, start investing in productionizing your prototype and embedding it natively into the product.</li>
</ul>
</section>
<section id="optimize-time-to-value" class="level2">
<h2 class="anchored" data-anchor-id="optimize-time-to-value">Optimize time to value</h2>
<p>In the figure below, you can see that it’s possible to <strong>“short-circuit”</strong> the flow. And this, possibly, is the single most important part of it.</p>
<p>If, in the prototyping phase, either the additional analysis or the first draft shows that it doesn’t make sense to move forward? Go back and adjust your hypothesis with the new learnings. If, after the experiment phase, there is no expected uplift – no worries, just go back and tune your hypothesis.</p>
<p><img src="https://www.eliasnema.com/posts/hypothesize/time_to_value.png" class="img-fluid"></p>
<p>All of these allows us to save costs, possibly in the most expensive parts, and to <strong>improve time to value</strong>. Time to value is a commonly optimized metric that measures the length of time necessary to realize the benefits of the solution.</p>
<p>And your actual savings will be even greater than you see in the figure above, because each of the following components is potentially bigger in time investment than the previous one. Of course, it will strongly depend on the change you’re making, but generally it’s easier to create a prototype than to productionize it.</p>
<p><img src="https://www.eliasnema.com/posts/hypothesize/savings.png" class="img-fluid"></p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This framework doesn’t command you HOW to build your product. Instead, it guides your thinking into WHAT is the most meaningful thing to work on at any particular moment. This allows you to hedge product risks while maximizing learnings, build a common dictionary within a team and optimize time to value.</p>
<p>Since it serves only as guidance, it can also work together with scrum, radical focus or any other process you’re using. No need to break what’s already working.</p>
<p>I’m going into more details about how to generate hypotheses and about each of the steps in the book I’m working now. It’s called <strong>Hypothesize!</strong> and you can <a href="https://gumroad.com/l/SSTiNM/kwfh1gn">pre-order it now at half price</a>.</p>
<p><em>Note that you will only get charged after the release date.</em></p>


</section>

 ]]></description>
  <category>product</category>
  <category>experimentation</category>
  <guid>https://www.eliasnema.com/posts/hypothesize/hypothesize.html</guid>
  <pubDate>Sat, 23 May 2020 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Unaggregate your data, bust a quote and learn a thing about modern football</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/man_city_stats/city_stats.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Somehow I’ve spent the last week looking at Man City stats.</p>
<p>It all started with this quote in the book about the <a href="https://www.amazon.com/Football-Hackers-Science-Data-Revolution/dp/1788702050">data and football</a> that I’m reading now.</p>
<p><img src="https://www.eliasnema.com/posts/man_city_stats/quote.jpg" class="img-fluid"></p>

<div class="no-row-height column-margin column-container"><div class="">
<p><strong>Spoiler alert</strong>: this proved to be wrong. But it triggered interest from my side. Man City is one of the most recognisable sides, but do they play that short?</p>
</div></div></section>
<section id="a-common-pitfall" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="a-common-pitfall">A common pitfall</h2>
<p>So I wanted to quickly double-check the fact. Which, turned out, to be not easy at all. Available data is either not complete or too aggregated, there is a shortage of reliable publicly available sources. For example, the <a href="https://www.premierleague.com/stats/top/clubs/att_obox_goal?se=79">official premier league</a> site says that MC has scored 13 goals from outside the box during the 2017/18 season, but there is no information about distributions (the quote mentions only the first half of the season).</p>
<p>And here I fell in a very common mistake people make while working with data. It’s always tempting to look at aggregated data to see patterns and trends. However, often you need the exact opposite: take one sample, study it, see if it makes sense, see if it contains data that you expect.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>This is a great example of a very common mistake people make when working with data. It’s always tempting to look at aggregated data to see patterns and trends. However, often you need the exact opposite: take one sample, study it, see if it makes sense, see if it contains data that you expect.</p>
</div></div><p>In fact, to prove the quote wrong I needed just a single example of a goal that City has scored from outside the box during that part of the season. So after searching for the best strikes of the season on YouTube&nbsp;I found that the quote didn’t hold up. Just take a look at this last-minute <a href="https://www.youtube.com/watch?v=VVDJEVCUO3c">wonder-strike from Sterling</a>.</p>
<p>So we’ve already proved the quote wrong simply by watching a couple of great football moments.</p>
</section>
<section id="going-deeper" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="going-deeper">Going deeper</h2>
<p>But now that we are in the topic, let’s dig deeper. The best website that I was able to find to look at more granular data is <a href="https://fbref.com/">fbref</a>. There I took statistics on every shot Man City did during their last 3 Premier League seasons. We also have a distance for each shot.</p>
<section id="visualising" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="visualising">Visualising</h3>
<p>Here and below I’ll be taking into consideration only first halves of the seasons. First, because the quote was about that. Second, this would be enough to see the tactical changes over time. Third, data for the 2019/20 season is incomplete anyways.</p>
<p>Let’s start with trying to understand if there is any significant difference between seasons.</p>
<p><img src="https://www.eliasnema.com/posts/man_city_stats/histograms.png" class="img-fluid"></p>
<p>This visualisation is of little use here, but at least we can see some distinctions between seasons.</p>
<p>Let’s quickly compute t-test statistics to get a numeric representation of it:</p>
<pre><code>season 17/18 vs 18/19: Ttest_indResult(statistic=1.1348979627228202, pvalue=0.2568168035045629)
season 18/19 vs 19/20: Ttest_indResult(statistic=1.8185721011018878, pvalue=0.06943167359879912)
season 17/18 vs 19/20: Ttest_indResult(statistic=3.1215926762079387, pvalue=0.0018782472078475076)</code></pre>

<div class="no-row-height column-margin column-container"><div class="">
<p>This compounds to a huge difference from 2017 to 2019 seasons.</p>
</div></div><p>Indeed, looks like there is a small but not very significant difference between 2017 and 2018, while a much bigger difference between 2018 and 2019. This compounds to a huge difference from 2017 to 2019 seasons.</p>
<p>Let’s give this difference a better human interface.</p>
</section>
<section id="stacked-graph" class="level3">
<h3 class="anchored" data-anchor-id="stacked-graph">Stacked graph</h3>
<p>One way to look at distribution differences would be a stacked bar graph. This graph quickly falls apart when the number of dimension grows, but is perfect for our use case.</p>
<p><img src="https://www.eliasnema.com/posts/man_city_stats/stacked_graph.png" class="img-fluid"></p>
<p>It’s not too detailed, but also very concise. And we clearly see that each season City is aiming to shoot more and from the closer range.</p>
</section>
<section id="density-graphs" class="level3">
<h3 class="anchored" data-anchor-id="density-graphs">Density graphs</h3>
<p>If we want to look even closer we can go with density graphs.</p>
<p><img src="https://www.eliasnema.com/posts/man_city_stats/density.png" class="img-fluid"></p>
<p>Wow, this tells a story now. A coincidence? I doubt that.</p>
</section>
</section>
<section id="conclusion-learnings" class="level2">
<h2 class="anchored" data-anchor-id="conclusion-learnings">Conclusion &amp; learnings</h2>
<p>I believe football evolves by learning more about itself. It’s a known fact that teams have started optimising for shooting from positions with higher chance of scoring, which <a href="https://totalfootballanalysis.com/article/xg-analysis-tactical-analysis-tactics">translates into less long-ranged shots</a>.</p>
<p>Evolution of Man City from the season 2017 to 2019 shows that they indeed follow this trend of shooting from “better” positions. But does it make their game better? That’s the question we can’t objectively answer with data.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Some concise takeaways for the data folks
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Don’t start with aggregated data. Firstly, make sure that single data points look reasonable.</li>
<li>Compare distributions numerically using the t-test, Kolmogorov-Smirnov test, etc.</li>
<li>Add a visual story by bucketing:
<ul>
<li>Histograms</li>
<li>Pivot histograms into a stacked chart for a different perspective</li>
<li>Go for density&nbsp;estimations for more details</li>
</ul></li>
</ul>
</div>
</div>
</section>
<section id="code" class="level2">
<h2 class="anchored" data-anchor-id="code">Code</h2>
<section id="reading-data" class="level3">
<h3 class="anchored" data-anchor-id="reading-data">Reading data</h3>
<div id="cell-11" class="cell" data-execution_count="27">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb2-4">city <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'man_city_17_18_19.csv'</span>)</span></code></pre></div>
</details>
</div>
<div id="cell-12" class="cell" data-execution_count="28">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">city.head()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Season</th>
<th data-quarto-table-cell-role="th">Matchday</th>
<th data-quarto-table-cell-role="th">Opponent</th>
<th data-quarto-table-cell-role="th">Minute</th>
<th data-quarto-table-cell-role="th">Player</th>
<th data-quarto-table-cell-role="th">Outcome</th>
<th data-quarto-table-cell-role="th">Distance</th>
<th data-quarto-table-cell-role="th">BodyPart</th>
<th data-quarto-table-cell-role="th">Notes</th>
<th data-quarto-table-cell-role="th">SCA1</th>
<th data-quarto-table-cell-role="th">SCA1Event</th>
<th data-quarto-table-cell-role="th">SCA2</th>
<th data-quarto-table-cell-role="th">SCA2Event</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2017/18</td>
<td>1</td>
<td>Brighton &amp; Hove Albion</td>
<td>4</td>
<td>Gabriel Jesus</td>
<td>Blocked</td>
<td>11</td>
<td>Right Foot</td>
<td>NaN</td>
<td>Fernandinho</td>
<td>Pass (Live)</td>
<td>Kyle Walker</td>
<td>Pass (Live)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2017/18</td>
<td>1</td>
<td>Brighton &amp; Hove Albion</td>
<td>9</td>
<td>Danilo</td>
<td>Off Target</td>
<td>21</td>
<td>Right Foot</td>
<td>NaN</td>
<td>David Silva</td>
<td>Pass (Live)</td>
<td>Danilo</td>
<td>Pass (Live)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2017/18</td>
<td>1</td>
<td>Brighton &amp; Hove Albion</td>
<td>14</td>
<td>Fernandinho</td>
<td>Off Target</td>
<td>10</td>
<td>Head</td>
<td>NaN</td>
<td>David Silva</td>
<td>Pass (Dead)</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2017/18</td>
<td>1</td>
<td>Brighton &amp; Hove Albion</td>
<td>17</td>
<td>Kevin De Bruyne</td>
<td>Saved</td>
<td>27</td>
<td>Right Foot</td>
<td>Free kick</td>
<td>David Silva</td>
<td>Fouled</td>
<td>Fernandinho</td>
<td>Pass (Live)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2017/18</td>
<td>1</td>
<td>Brighton &amp; Hove Albion</td>
<td>32</td>
<td>Kevin De Bruyne</td>
<td>Blocked</td>
<td>28</td>
<td>Right Foot</td>
<td>Free kick</td>
<td>David Silva</td>
<td>Fouled</td>
<td>Danilo</td>
<td>Pass (Live)</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-13" class="cell" data-execution_count="29">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(city.Season.value_counts())</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(city.Matchday.nunique())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>2019/20    376
2018/19    346
2017/18    338
Name: Season, dtype: int64
19</code></pre>
</div>
</div>
<p>Data only for two halves of two seasons. Getting shots per searson.</p>
<div id="cell-15" class="cell" data-execution_count="30">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">y17 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> city.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Season == '2017/18'"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance'</span>]</span>
<span id="cb6-2">y18 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> city.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Season == '2018/19'"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance'</span>]</span>
<span id="cb6-3">y19 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> city.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Season == '2019/20'"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance'</span>]</span></code></pre></div>
</details>
</div>
</section>
<section id="comparing-two-samples" class="level3">
<h3 class="anchored" data-anchor-id="comparing-two-samples">Comparing two samples</h3>
<div id="cell-17" class="cell" data-execution_count="31">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-2">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Solarize_Light2'</span>)</span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'retina'</span></span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb7-6">warnings.filterwarnings(action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span></code></pre></div>
</details>
</div>
<div id="cell-18" class="cell" data-execution_count="32">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">sns.distplot(y17, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'17/18'</span>)</span>
<span id="cb8-2">sns.distplot(y18, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'18/19'</span>)</span>
<span id="cb8-3">sns.distplot(y19, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'19/20'</span>)</span>
<span id="cb8-4">plt.legend()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/man_city_stats/city_stats_files/figure-html/cell-7-output-1.png" width="395" height="264" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="33">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">y17.mean(), y17.std()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>(16.701183431952664, 8.51091453670634)</code></pre>
</div>
</div>
<div id="cell-20" class="cell" data-execution_count="34">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">y18.mean(), y18.std()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>(15.95086705202312, 8.779779921952818)</code></pre>
</div>
</div>
<div id="cell-21" class="cell" data-execution_count="35">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">y19.mean(), y19.std()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>(14.872340425531915, 6.9627336279989995)</code></pre>
</div>
</div>
<div id="cell-22" class="cell" data-execution_count="36">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equal_var=False to perform welch's test instead, because of different variance and amount of sample</span></span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'season 17/18 vs 18/19: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ttest_ind(y17,y18, equal_var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'season 18/19 vs 19/20: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ttest_ind(y18,y19, equal_var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb15-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'season 17/18 vs 19/20: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ttest_ind(y17,y19, equal_var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>season 17/18 vs 18/19: Ttest_indResult(statistic=1.1348979627228202, pvalue=0.2568168035045629)
season 18/19 vs 19/20: Ttest_indResult(statistic=1.8185721011018878, pvalue=0.06943167359879913)
season 17/18 vs 19/20: Ttest_indResult(statistic=3.1215926762079387, pvalue=0.001878247207847508)</code></pre>
</div>
</div>
<p>Looks like there is a high chance of difference between them.</p>
</section>
<section id="density-distribution" class="level3">
<h3 class="anchored" data-anchor-id="density-distribution">Density distribution</h3>
<div id="cell-25" class="cell" data-execution_count="37">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">kde17 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.gaussian_kde(y17)</span>
<span id="cb17-2">kde18 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.gaussian_kde(y18)</span>
<span id="cb17-3">kde19 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.gaussian_kde(y19)</span>
<span id="cb17-4">grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)</span></code></pre></div>
</details>
</div>
<div id="cell-26" class="cell" data-execution_count="38">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">f, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb18-2"></span>
<span id="cb18-3">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(grid, kde17(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"season 2017/18"</span>)</span>
<span id="cb18-4">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(grid, kde18(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"season 2018/19"</span>)</span>
<span id="cb18-5">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(grid, kde18(grid)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>kde17(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"difference between 2018 and 2017"</span>)</span>
<span id="cb18-6"></span>
<span id="cb18-7">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(grid, kde18(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"season 2018/19"</span>)</span>
<span id="cb18-8">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(grid, kde19(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"season 2019/20"</span>)</span>
<span id="cb18-9">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(grid, kde19(grid)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>kde18(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"difference between 2019 and 2018"</span>)</span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># axs[2].plot(grid, kde17(grid), label="season 2017/18")</span></span>
<span id="cb18-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># axs[2].plot(grid, kde19(grid), label="season 2019/20")</span></span>
<span id="cb18-13">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(grid, kde19(grid)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>kde17(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"difference between 2019 and 2017"</span>)</span>
<span id="cb18-14"></span>
<span id="cb18-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> axs:</span>
<span id="cb18-16">    ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Density'</span>)</span>
<span id="cb18-17">    ax.legend()</span>
<span id="cb18-18"></span>
<span id="cb18-19">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shooting distance'</span>)</span>
<span id="cb18-20">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/man_city_stats/city_stats_files/figure-html/cell-13-output-1.png" width="520" height="699" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-27" class="cell" data-execution_count="39">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb19-2">plt.plot(grid, kde18(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"season 2018/19"</span>, figure<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plot)</span>
<span id="cb19-3">plt.plot(grid, kde19(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"season 2019/20"</span>, figure<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plot)</span>
<span id="cb19-4">plt.plot(grid, kde19(grid)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>kde18(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"difference between 2019 and 2018"</span>)</span>
<span id="cb19-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shooting distance'</span>)</span>
<span id="cb19-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Density'</span>)</span>
<span id="cb19-7">plt.legend()</span>
<span id="cb19-8">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/man_city_stats/city_stats_files/figure-html/cell-14-output-1.png" width="514" height="213" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-28" class="cell" data-execution_count="40">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb20-2">plt.plot(grid, kde17(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"season 2017/18"</span>, figure<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plot)</span>
<span id="cb20-3">plt.plot(grid, kde19(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"season 2019/20"</span>, figure<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plot)</span>
<span id="cb20-4">plt.plot(grid, kde19(grid)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>kde17(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"difference between 2019 and 2017"</span>)</span>
<span id="cb20-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shooting distance'</span>)</span>
<span id="cb20-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Density'</span>)</span>
<span id="cb20-7">plt.legend()</span>
<span id="cb20-8">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/man_city_stats/city_stats_files/figure-html/cell-15-output-1.png" width="514" height="210" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-29" class="cell" data-execution_count="41">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb21-2">plt.plot(grid, kde18(grid)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>kde17(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"difference between 18 and 17"</span>, figure<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plot)</span>
<span id="cb21-3">plt.plot(grid, kde19(grid)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>kde18(grid), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"difference between 19 and 18"</span>)</span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.plot(grid, kde19(grid)-kde17(grid), label="difference between 19 and 17")</span></span>
<span id="cb21-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shooting distance'</span>)</span>
<span id="cb21-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Density'</span>)</span>
<span id="cb21-7">plt.legend()</span>
<span id="cb21-8">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/man_city_stats/city_stats_files/figure-html/cell-16-output-1.png" width="527" height="209" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>You can see the difference after plotting estimated densities.</p>
<p>Manchester City has started shooting more from the 5-10 and 15-20 yards range. They shoot less from &gt; 30 yards.</p>
<div id="cell-31" class="cell" data-execution_count="42">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">diff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.bar(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), </span>
<span id="cb22-2">             height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(np.histogram(y19,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.histogram(y17,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb22-3">             ) </span>
<span id="cb22-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a-b"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>Text(0.5, 1.0, 'a-b')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/man_city_stats/city_stats_files/figure-html/cell-17-output-2.png" width="377" height="266" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Here is the difference between histograms.</p>
<div id="cell-33" class="cell" data-execution_count="43">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pd.DataFrame([</span>
<span id="cb24-2">        np.histogram(y17,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y17.count() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb24-3">        np.histogram(y18,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y18.count() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb24-4">        np.histogram(y19,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y19.count() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb24-5">        ], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019'</span>], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0-10'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'10-20'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'20-30'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'30-40'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'40-50'</span>])</span></code></pre></div>
</details>
</div>
<div id="cell-34" class="cell" data-execution_count="44">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">city[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance bins'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  pd.cut(city[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>])</span></code></pre></div>
</details>
</div>
<div id="cell-35" class="cell" data-execution_count="45">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> city[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Season'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance bins'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance'</span>]].groupby(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Season'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance bins'</span>],).agg(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>).unstack()</span></code></pre></div>
</details>
</div>
<div id="cell-36" class="cell" data-execution_count="46">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">df1.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'(0, 10]'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'(10, 20]'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'(20, 30]'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'(30, 40]'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'(40, 50]'</span>]</span></code></pre></div>
</details>
</div>
<div id="cell-37" class="cell" data-execution_count="47">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>, stacked<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.85</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb28-2">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'# of shots'</span>)</span>
<span id="cb28-3">ax.legend(bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.025</span>))</span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(ax.patches):</span>
<span id="cb28-6">    width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.get_width(), p.get_height()</span>
<span id="cb28-7">    x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.get_xy()</span>
<span id="cb28-8">    pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>df1.iloc[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb28-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.04</span>:</span>
<span id="cb28-10">        ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.0%}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(pct), (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.27</span>, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> ), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/man_city_stats/city_stats_files/figure-html/cell-22-output-1.png" width="360" height="296" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-38" class="cell" data-execution_count="48">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">pd.DataFrame([(df1.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017/18'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>df1.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017/18'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()).T,</span>
<span id="cb29-2">(df1.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018/19'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>df1.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018/19'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()).T,</span>
<span id="cb29-3">(df1.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019/20'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>df1.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019/20'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()).T])</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="48">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">(0, 10]</th>
<th data-quarto-table-cell-role="th">(10, 20]</th>
<th data-quarto-table-cell-role="th">(20, 30]</th>
<th data-quarto-table-cell-role="th">(30, 40]</th>
<th data-quarto-table-cell-role="th">(40, 50]</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2017/18</td>
<td>0.281065</td>
<td>0.375740</td>
<td>0.269231</td>
<td>0.071006</td>
<td>0.002959</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2018/19</td>
<td>0.321739</td>
<td>0.385507</td>
<td>0.240580</td>
<td>0.049275</td>
<td>0.002899</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2019/20</td>
<td>0.313830</td>
<td>0.430851</td>
<td>0.252660</td>
<td>0.002660</td>
<td>0.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-39" class="cell" data-execution_count="49">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">df1</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="49">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">(0, 10]</th>
<th data-quarto-table-cell-role="th">(10, 20]</th>
<th data-quarto-table-cell-role="th">(20, 30]</th>
<th data-quarto-table-cell-role="th">(30, 40]</th>
<th data-quarto-table-cell-role="th">(40, 50]</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">Season</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2017/18</td>
<td>95</td>
<td>127</td>
<td>91</td>
<td>24</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2018/19</td>
<td>111</td>
<td>133</td>
<td>83</td>
<td>17</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2019/20</td>
<td>118</td>
<td>162</td>
<td>95</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>analytics</category>
  <guid>https://www.eliasnema.com/posts/man_city_stats/city_stats.html</guid>
  <pubDate>Tue, 19 May 2020 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Getting “Structured” Back to SQL</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/structured-sql/structured-sql.html</link>
  <description><![CDATA[ 





<section id="half-a-century-old-question" class="level1">
<h1>Half a century old question</h1>
<p>Not that many questions in computer science have been circulating for more than 50 years and are still around. <strong>“How to write SQL”</strong> is one of them.</p>
<p>There is a good reason for this.</p>
<p>Relational databases have dominated the market since the 70s. Then the whole <a href="https://en.wikipedia.org/wiki/NoSQL">NoSQL</a> movement arose and smoothly evolved into a <a href="https://en.wikipedia.org/wiki/NewSQL">NewSQL</a>. Recently, all major streaming systems are <a href="https://arxiv.org/abs/1905.12133">adding support for SQL</a>. There should be something really powerful about this language.</p>
<p>With great power, comes - you know. SQL is so flexible that allows you to write queries in almost any form and still get some results. The problem is that understanding if this result makes sense requires usually more effort than to produce it. You saw it yourself - “fixing” joins with <code>DISTINCT</code> statement, counting rows multiple times.</p>
<blockquote class="blockquote">
<p>SQL is so flexible that allows you to write queries in almost any form and still get <strong>some results</strong>. The problem is that understanding if this result makes sense <strong>requires usually more effort</strong> than to produce it.</p>
</blockquote>
<p>I argue that most of this can be avoided by writing queries in a <strong>structured manner</strong>, optimizing for readability first.</p>
</section>
<section id="structure-d-query-language" class="level1">
<h1>Structure <em>[d Query Language]</em></h1>
<p>But how to create a structure? First, begin with the end in mind. What should the answer look like? For example, <strong>you want to analyze revenue for a specific sales channel by different region</strong>. See, it’s already a prepared <code>SELECT</code> statement.</p>
<p><em>Here and below, I’ll be using pseudo-SQL to avoid unrelated details.</em></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> channel, region, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(sales)</span></code></pre></div>
<p>Usually, there would be the main subject in your question. Above, you want to analyze revenue. So <code>sales</code> is going to be your main entity, <strong>a driving table</strong>. In FROM, you should always put it first.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> sales                                 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- driving table</span></span></code></pre></div>
<p>Now you want to filter for a specific channel. For this, go to the new table - channels. When adding it, think of your query as a tree - the main table as a body and the new table as a branch.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> sales                                 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- driving table</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> channels <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> channel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'web'</span>         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- branch 1</span></span></code></pre></div>
<blockquote class="blockquote">
<p>One thing to keep in mind when adding tables is the granularity you are operating on. The last thing you want is to introduce a row explosion when joining. <strong>Write your join conditions carefully.</strong></p>
</blockquote>
<p>The next step is to group results by region. In the sales table, there is only a <code>district_id</code>. For a region you need to go to <code>districts -&gt; cities -&gt; regions</code> tables. Hear your branch would consist of multiple tables.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb4-1">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> districts                           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- branch 2.1</span></span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> cities                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- branch 2.2</span></span>
<span id="cb4-3">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> regions                         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- branch 2.3</span></span></code></pre></div>
<p>Another way to think about this: I need to get the name of a region for each district. Basically, <code>district_id, region_name</code> with the join condition on <code>district_id</code>. It’s always good to double-check the join condition with a simple query like:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> district_id, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>)</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> (district_region_branch)   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---  branch 2 from the previous query</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> district_id</span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">HAVING</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>This will check if you have duplicates on the join key. Ideally, you will do this check for every branch introduced.</p>
<p>Branching metaphor also helps with rules for <code>OUTER</code> joins - whenever introduced, carry it over for all the join conditions till the end of the current branch. If there are data inconsistencies and some cities are not available in the <code>city</code> table. Hence you introduce a <code>LEFT JOIN</code> and carry it:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb6-1">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> districts                           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- branch</span></span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LEFT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> cities                       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- if outer join here</span></span>
<span id="cb6-3">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LEFT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> regions                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- then also here</span></span></code></pre></div>
<p>Ok, so what do we have at the end?</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> region, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(sales)</span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> sales                                 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- driving table</span></span>
<span id="cb7-3"></span>
<span id="cb7-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> channels <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> channel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'web'</span>      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- branch 1</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> districts                           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- branch 2.1</span></span>
<span id="cb7-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LEFT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> cities                       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- branch 2.2</span></span>
<span id="cb7-8">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LEFT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> regions                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---- branch 2.3</span></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> region</span></code></pre></div>
<p>Note how indentation makes the query structure more readable and puts all tables in purposeful groups.</p>
</section>
<section id="conclusion-and-a-recipe" class="level1">
<h1>Conclusion and a recipe</h1>
<p>Of course, we looked at quite a simple query. And SQL is <a href="https://en.wikipedia.org/wiki/SQL:2016">sophisticated nowadays</a>. You can do a JSON, pattern recognition, complex aggregations. However, the structure should come first. Here is how to enforce it:</p>
<blockquote class="blockquote">
<ol type="1">
<li><p><strong>Begin with the end in mind.</strong> Think about how your answer should look like.</p></li>
<li><p><strong>Find the main subject.</strong> Always put it to a FROM first. If there is more than one - wrap each into a CTE and apply these steps to each of them.</p></li>
<li><p>Add tables to the main <strong>one intent at a time.</strong> E.g.: “<em>all the following JOINs are here to get a region for a sale</em>”.</p></li>
<li><p>Be very careful about your joins. Ensure the table you add has <strong>not more than one row per join condition</strong>.</p></li>
<li><p>Move to <strong>grouping, analytical functions, etc. only after</strong> you’ve finished connecting all the data sources.</p></li>
</ol>
</blockquote>
<p>Once you have learned how to get the data you need from different sources and documented it in the form of a readable structure, the query will <strong>tell a story of your analysis</strong> in itself. More importantly, it will help others to better understand your intents and trust your results.</p>


</section>

 ]]></description>
  <category>analytics</category>
  <category>sql</category>
  <guid>https://www.eliasnema.com/posts/structured-sql/structured-sql.html</guid>
  <pubDate>Tue, 27 Aug 2019 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Makeover Monday W30: Arsenal FC stats 2018/19</title>
  <dc:creator>Elias Nema</dc:creator>
  <link>https://www.eliasnema.com/posts/arsenal/arsenal.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’ve always wanted to try the <a href="https://www.makeovermonday.co.uk/">makeover monday</a> since I learned about the project. But <em>busy being busy</em>, you know.</p>
<p>Last week, however, two things happened:</p>
<ul>
<li>Arsenal’s last season <a href="https://data.world/makeovermonday/2019w30">stats</a> were posted as a weekly project (and I love football).</li>
<li>I accidentally noticed that.</li>
</ul>
<p>So it was decided - I’m creating a visualisation.</p>
<div id="cell-2" class="cell" data-execution_count="24">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Imports</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandas.plotting <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scatter_matrix</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pio</span>
<span id="cb1-8">pio.renderers.default <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notebook"</span></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-10">warnings.filterwarnings(action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_excel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Arsenal Player Stats 2018-19.xlsx'</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="eda" class="level2">
<h2 class="anchored" data-anchor-id="eda">EDA</h2>
<div id="cell-4" class="cell" data-execution_count="25">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'columns: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>columns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>columns: Index(['Rank', 'Player', 'Nationality', 'Metric', 'Stat'], dtype='object')</code></pre>
</div>
</div>
<div id="cell-5" class="cell" data-execution_count="26">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df.head()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Rank</th>
<th data-quarto-table-cell-role="th">Player</th>
<th data-quarto-table-cell-role="th">Nationality</th>
<th data-quarto-table-cell-role="th">Metric</th>
<th data-quarto-table-cell-role="th">Stat</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>Pierre-Emerick Aubameyang</td>
<td>Gabon</td>
<td>Appearances</td>
<td>36</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>Alex Iwobi</td>
<td>Nigeria</td>
<td>Appearances</td>
<td>35</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>Alexandre Lacazette</td>
<td>France</td>
<td>Appearances</td>
<td>35</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>Lucas Torreira</td>
<td>Uruguay</td>
<td>Appearances</td>
<td>34</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>Matteo Guendouzi</td>
<td>France</td>
<td>Appearances</td>
<td>33</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>You can see that data is stored as rows per player/metric pair. Let’s pivot to get the player’s statistics in each row.</p>
<div id="cell-7" class="cell" data-execution_count="27">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Player'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Metric'</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Stat'</span>)</span>
<span id="cb5-2">training.head()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="27">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Metric</th>
<th data-quarto-table-cell-role="th">Appearances</th>
<th data-quarto-table-cell-role="th">Assists</th>
<th data-quarto-table-cell-role="th">Big Chances Missed</th>
<th data-quarto-table-cell-role="th">Clearances</th>
<th data-quarto-table-cell-role="th">Clearances Off Line</th>
<th data-quarto-table-cell-role="th">Dispossessed</th>
<th data-quarto-table-cell-role="th">Fouls</th>
<th data-quarto-table-cell-role="th">Goals</th>
<th data-quarto-table-cell-role="th">High Claim</th>
<th data-quarto-table-cell-role="th">Hit Woodwork</th>
<th data-quarto-table-cell-role="th">Minutes Played</th>
<th data-quarto-table-cell-role="th">Offsides</th>
<th data-quarto-table-cell-role="th">Own Goal</th>
<th data-quarto-table-cell-role="th">Passes</th>
<th data-quarto-table-cell-role="th">Punches</th>
<th data-quarto-table-cell-role="th">Red Cards</th>
<th data-quarto-table-cell-role="th">Saves</th>
<th data-quarto-table-cell-role="th">Shots</th>
<th data-quarto-table-cell-role="th">Tackles</th>
<th data-quarto-table-cell-role="th">Touches</th>
<th data-quarto-table-cell-role="th">Yellow Cards</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">Player</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Aaron Ramsey</td>
<td>28</td>
<td>6</td>
<td>2</td>
<td>3</td>
<td>0</td>
<td>27</td>
<td>21</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1328</td>
<td>4</td>
<td>0</td>
<td>773</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>33</td>
<td>34</td>
<td>1029</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Ainsley Maitland-Niles</td>
<td>16</td>
<td>1</td>
<td>0</td>
<td>11</td>
<td>1</td>
<td>17</td>
<td>8</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>986</td>
<td>1</td>
<td>0</td>
<td>451</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>5</td>
<td>33</td>
<td>782</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Alex Iwobi</td>
<td>35</td>
<td>6</td>
<td>3</td>
<td>10</td>
<td>0</td>
<td>56</td>
<td>8</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>1972</td>
<td>2</td>
<td>0</td>
<td>951</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>35</td>
<td>28</td>
<td>1415</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Alexandre Lacazette</td>
<td>35</td>
<td>8</td>
<td>13</td>
<td>29</td>
<td>0</td>
<td>61</td>
<td>51</td>
<td>13</td>
<td>0</td>
<td>1</td>
<td>2505</td>
<td>24</td>
<td>0</td>
<td>771</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>81</td>
<td>35</td>
<td>1313</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Bernd Leno</td>
<td>32</td>
<td>0</td>
<td>0</td>
<td>32</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>10</td>
<td>0</td>
<td>2835</td>
<td>0</td>
<td>0</td>
<td>922</td>
<td>16</td>
<td>0</td>
<td>105</td>
<td>0</td>
<td>0</td>
<td>1276</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<section id="adding-positions" class="level3">
<h3 class="anchored" data-anchor-id="adding-positions">Adding Positions</h3>
<p>I wanted to cluster players together to see if there are any patterns and groups. Then realised - it doesn’t make a good visualisation: hey, look, these players have more Saves - they are probably goalkeepers. So I decided to add player field position to the dataset.</p>
<p>With this data, let’s look at performance by position. Maybe a <a href="https://en.wikipedia.org/wiki/Radar_chart">radar chart</a> can work for such kind of comparison?</p>
<p>There is a limited amount of axes on a graph for users to still make sense of it. How to choose metrics to display? There are obvious choices of course: <strong>saves for goalkeepers, tackles for defenders, goals for forwards</strong>. But how about common attributes such as <strong>passes</strong> or <strong>touches</strong>?</p>
<p>To identify potentially interesting data points, I started with a correlation plot. I’m looking for interesting patterns, i.e.&nbsp;metrics that are not linearly correlated with the minutes played.</p>
<div id="cell-10" class="cell" data-execution_count="28">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">position_lookup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> training.index.tolist()}</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> gk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bernd Leno'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Petr Cech'</span>]:</span>
<span id="cb6-4">    position_lookup[gk] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GK'</span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [</span>
<span id="cb6-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Carl Jenkinson'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Héctor Bellerín'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Laurent Koscielny'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rob Holding'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sead Kolasinac'</span></span>
<span id="cb6-8">    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shkodran Mustafi'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sokratis'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Stephan Lichtsteiner'</span></span>
<span id="cb6-9">]:</span>
<span id="cb6-10">    position_lookup[df] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DF'</span></span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> mf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [</span>
<span id="cb6-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Aaron Ramsey'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ainsley Maitland-Niles'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Denis Suárez'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Granit Xhaka'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Henrikh Mkhitaryan'</span></span>
<span id="cb6-14">    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Joe Willock'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Konstantinos Mavropanos'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lucas Torreira'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Matteo Guendouzi'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mesut Özil'</span></span>
<span id="cb6-15">    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mohamed Elneny'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nacho Monreal'</span>,</span>
<span id="cb6-16">]:</span>
<span id="cb6-17">    position_lookup[mf] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MF'</span></span>
<span id="cb6-18"></span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fw <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [</span>
<span id="cb6-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alex Iwobi'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alexandre Lacazette'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bukayo Saka'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Danny Welbeck'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Eddie Nketiah'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pierre-Emerick Aubameyang'</span></span>
<span id="cb6-22">]:</span>
<span id="cb6-23">    position_lookup[fw] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FW'</span></span>
<span id="cb6-24"></span>
<span id="cb6-25">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'position'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(position_lookup)</span></code></pre></div>
</details>
</div>
<div id="cell-11" class="cell" data-execution_count="29">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">data_per_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'position'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-2">data_per_position</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="29">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Metric</th>
<th data-quarto-table-cell-role="th">Appearances</th>
<th data-quarto-table-cell-role="th">Assists</th>
<th data-quarto-table-cell-role="th">Big Chances Missed</th>
<th data-quarto-table-cell-role="th">Clearances</th>
<th data-quarto-table-cell-role="th">Clearances Off Line</th>
<th data-quarto-table-cell-role="th">Dispossessed</th>
<th data-quarto-table-cell-role="th">Fouls</th>
<th data-quarto-table-cell-role="th">Goals</th>
<th data-quarto-table-cell-role="th">High Claim</th>
<th data-quarto-table-cell-role="th">Hit Woodwork</th>
<th data-quarto-table-cell-role="th">Minutes Played</th>
<th data-quarto-table-cell-role="th">Offsides</th>
<th data-quarto-table-cell-role="th">Own Goal</th>
<th data-quarto-table-cell-role="th">Passes</th>
<th data-quarto-table-cell-role="th">Punches</th>
<th data-quarto-table-cell-role="th">Red Cards</th>
<th data-quarto-table-cell-role="th">Saves</th>
<th data-quarto-table-cell-role="th">Shots</th>
<th data-quarto-table-cell-role="th">Tackles</th>
<th data-quarto-table-cell-role="th">Touches</th>
<th data-quarto-table-cell-role="th">Yellow Cards</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">position</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">DF</td>
<td>143</td>
<td>12</td>
<td>2</td>
<td>459</td>
<td>1</td>
<td>64</td>
<td>143</td>
<td>6</td>
<td>0</td>
<td>0</td>
<td>11479</td>
<td>17</td>
<td>1</td>
<td>6968</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>64</td>
<td>201</td>
<td>9185</td>
<td>34</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">FW</td>
<td>120</td>
<td>20</td>
<td>39</td>
<td>59</td>
<td>0</td>
<td>156</td>
<td>76</td>
<td>40</td>
<td>0</td>
<td>5</td>
<td>7425</td>
<td>51</td>
<td>0</td>
<td>2488</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>217</td>
<td>88</td>
<td>3984</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">GK</td>
<td>39</td>
<td>0</td>
<td>0</td>
<td>39</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>16</td>
<td>0</td>
<td>3420</td>
<td>0</td>
<td>0</td>
<td>1146</td>
<td>18</td>
<td>0</td>
<td>133</td>
<td>0</td>
<td>1</td>
<td>1591</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MF</td>
<td>229</td>
<td>20</td>
<td>9</td>
<td>205</td>
<td>2</td>
<td>188</td>
<td>193</td>
<td>23</td>
<td>0</td>
<td>3</td>
<td>15241</td>
<td>21</td>
<td>0</td>
<td>10203</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>186</td>
<td>319</td>
<td>13366</td>
<td>36</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-12" class="cell" data-execution_count="30">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Common metrics</span></span>
<span id="cb8-2"></span>
<span id="cb8-3">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-4">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-5">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_played_per_apperance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-6">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'touches_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-7">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'touches_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># GK metrics</span></span>
<span id="cb8-10">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high_claim_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'High Claim'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-11">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'punches_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Punches'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-12">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saves_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Saves'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-13"></span>
<span id="cb8-14">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high_claim_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'High Claim'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-15">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'punches_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Punches'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-16">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saves_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Saves'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-17"></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DF metrics</span></span>
<span id="cb8-19">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'clearances_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clearances'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-20">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'clearances_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clearances'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-21">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'clearances_per_touch'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clearances'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>]</span>
<span id="cb8-22">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fouls_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fouls'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-23">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fouls_per_clearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fouls'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clearances'</span>]</span>
<span id="cb8-24">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fouls_per_touch'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fouls'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>]</span>
<span id="cb8-25">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yc_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yellow Cards'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-26">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yc_per_tackle'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yellow Cards'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tackles'</span>]</span>
<span id="cb8-27">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yc_per_foul'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yellow Cards'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fouls'</span>]</span>
<span id="cb8-28">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tackles_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tackles'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-29">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tackles_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tackles'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-30"></span>
<span id="cb8-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Midfield metrics</span></span>
<span id="cb8-32">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Assists'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-33">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Assists'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-34">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_pass'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Assists'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passes'</span>]</span>
<span id="cb8-35">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_touch'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Assists'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>]</span>
<span id="cb8-36">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dispossessed_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dispossessed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-37">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dispossessed_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dispossessed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-38">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dispossessed_per_pass'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dispossessed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passes'</span>]</span>
<span id="cb8-39">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dispossessed_per_touch'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dispossessed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>]</span>
<span id="cb8-40">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fouls_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fouls'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-41">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fouls_per_clearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fouls'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clearances'</span>]</span>
<span id="cb8-42">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fouls_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fouls'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-43">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fouls_per_touch'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fouls'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>]</span>
<span id="cb8-44">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goals'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-45">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goals'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-46">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals_per_shot'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goals'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shots'</span>]</span>
<span id="cb8-47">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals_per_touch'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goals'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>]</span>
<span id="cb8-48">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-49">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-50">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_per_touches'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>]</span>
<span id="cb8-51">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shots_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shots'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-52">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shots_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shots'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-53">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shots_per_touch'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shots'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>]</span>
<span id="cb8-54">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tackles_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tackles'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-55">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tackles_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tackles'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-56">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tackles_per_touch'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tackles'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>]</span>
<span id="cb8-57">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tackles_per_clearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tackles'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clearances'</span>]</span>
<span id="cb8-58">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'touches_per_apperance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-59">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'touches_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-60"></span>
<span id="cb8-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FW metrics</span></span>
<span id="cb8-62">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Assists'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-63">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'missed_chances_per_shot'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Big Chances Missed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shots'</span>]</span>
<span id="cb8-64">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'missed_chances_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Big Chances Missed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-65">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goals'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-66">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'offsides_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Offsides'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-67">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shots_per_min_played'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shots'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb8-68"></span>
<span id="cb8-69">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Assists'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-70">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'missed_chances_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Big Chances Missed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-71">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goals'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-72">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'offsides_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Offsides'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span>
<span id="cb8-73">training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shots_per_appearance'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shots'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> training[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Appearances'</span>]</span></code></pre></div>
</details>
</div>
<div id="cell-13" class="cell" data-scrolled="true" data-execution_count="31">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scatter_matrix(</span>
<span id="cb9-2">    training.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"position == 'DF'"</span>)[</span>
<span id="cb9-3">        [</span>
<span id="cb9-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clearances'</span>,</span>
<span id="cb9-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clearances Off Line'</span>,</span>
<span id="cb9-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fouls'</span>,</span>
<span id="cb9-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tackles'</span>,</span>
<span id="cb9-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Red Cards'</span>,</span>
<span id="cb9-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yellow Cards'</span>,</span>
<span id="cb9-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>,</span>
<span id="cb9-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb9-12">        ],</span>
<span id="cb9-13">        figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/arsenal/arsenal_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>There are some:</p>
<ul>
<li><strong>bad choices</strong> (clearances off the line - only a couple of players have at least 1);</li>
<li>not so obvious but <strong>not interesting</strong> - the more you play the more your KPI is;</li>
<li>potentially <strong>distinguishable</strong> KPIs.</li>
</ul>
<p>What would be the best way to put it on the graph?</p>
</section>
<section id="scaling" class="level3">
<h3 class="anchored" data-anchor-id="scaling">Scaling</h3>
<p>If we want to create player profiles, we cannot just say Cech made X saves while Leno made Y. We need to normalise it. The most precise would be to do it by minutes played. So <strong>tackles per minute played</strong> or <strong>passes per minute played</strong>.</p>
<p>Having these numbers, we can already iterate to find the best representation.</p>
<section id="ratios-as-is" class="level4">
<h4 class="anchored" data-anchor-id="ratios-as-is">Ratios as-is</h4>
<p>The good part here - the real values are displayed for the KPIs. We can see Mustafi is completing around 0.06 clearances per minute played, more than anyone else. The problem - it’s hard to have all the numbers at the same scale, so some metrics skew the scale towards one direction and so it becomes hard to see values for smaller values.</p>
<blockquote class="blockquote">
<p>Mustafi - first in memes but also completing around 0.06 clearances and 0.025 tackles per minute, more than any other defender in a team.</p>
</blockquote>
</section>
<section id="log-scaling" class="level4">
<h4 class="anchored" data-anchor-id="log-scaling">Log-scaling</h4>
<p>We can try to play with axis scales to get a more equal distribution of numbers. As you can see now graphs are more equally distributed, but it’s a mess in readability.</p>
</section>
<section id="relative-scaling" class="level4">
<h4 class="anchored" data-anchor-id="relative-scaling">Relative scaling</h4>
<p>We can divide values by the maximum for the metric at this position. So all players will get a percentage from the maximum for the position in a team. As for the example above: Mustafi will get 1 for the clearances, Sokratis around 0.8 from that and so on.</p>
<p>Personally, I like the last approach most, even though with it we are losing the interpretability.</p>
<div id="fig-scaling" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-scaling-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/arsenal/DF_nonscaled.png" class="img-fluid figure-img"></p>
<figcaption>Ratios</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/arsenal/DF_logr.png" class="img-fluid figure-img"></p>
<figcaption>Log-scaled</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.eliasnema.com/posts/arsenal/DF_scaled.png" class="img-fluid figure-img"></p>
<figcaption>Max-scaled</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-scaling-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Different attempts at a radar chart
</figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="by-position" class="level2">
<h2 class="anchored" data-anchor-id="by-position">By Position</h2>
<section id="goalkeepers" class="level3">
<h3 class="anchored" data-anchor-id="goalkeepers">Goalkeepers</h3>
<div id="cell-20" class="cell" data-execution_count="32">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">gk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"position == 'GK'"</span>)[</span>
<span id="cb10-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high_claim_per_appearance'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'punches_per_appearance'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saves_per_appearance'</span></span>
<span id="cb10-3">    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_per_appearance'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'clearances_per_appearance'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb10-4">].rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high_claim_per_appearance'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'High Claims'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'punches_per_appearance'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Punches'</span>, </span>
<span id="cb10-5">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'saves_per_appearance'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Saves'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_per_appearance'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passes'</span>,</span>
<span id="cb10-6">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'clearances_per_appearance'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clearances'</span>})</span>
<span id="cb10-7"></span>
<span id="cb10-8">max_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gk.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>().to_dict()</span>
<span id="cb10-9">gk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(gk.unstack()).reset_index()</span>
<span id="cb10-10">gk.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kpi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>]</span>
<span id="cb10-11">gk[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'denom'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gk.kpi.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(max_map)</span>
<span id="cb10-12">gk[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gk.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> gk.denom</span>
<span id="cb10-13">gk.T</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="32">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
<th data-quarto-table-cell-role="th">11</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">kpi</td>
<td>High Claims</td>
<td>High Claims</td>
<td>Punches</td>
<td>Punches</td>
<td>Saves</td>
<td>Saves</td>
<td>Passes</td>
<td>Passes</td>
<td>Clearances</td>
<td>Clearances</td>
<td>Minutes Played</td>
<td>Minutes Played</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">name</td>
<td>Bernd Leno</td>
<td>Petr Cech</td>
<td>Bernd Leno</td>
<td>Petr Cech</td>
<td>Bernd Leno</td>
<td>Petr Cech</td>
<td>Bernd Leno</td>
<td>Petr Cech</td>
<td>Bernd Leno</td>
<td>Petr Cech</td>
<td>Bernd Leno</td>
<td>Petr Cech</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">value</td>
<td>0.364583</td>
<td>1.0</td>
<td>1.0</td>
<td>0.571429</td>
<td>0.820312</td>
<td>1.0</td>
<td>0.900391</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.206349</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">denom</td>
<td>0.857143</td>
<td>0.857143</td>
<td>0.5</td>
<td>0.5</td>
<td>4.0</td>
<td>4.0</td>
<td>32.0</td>
<td>32.0</td>
<td>1.0</td>
<td>1.0</td>
<td>2835.0</td>
<td>2835.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-21" class="cell" data-execution_count="33">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.line_polar(gk, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>, theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kpi'</span>, line_dash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, line_close<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb11-2">                    , template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plotly_white"</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4">fig.update_traces(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines'</span>, line_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb11-5">fig.update_layout(legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>))</span>
<span id="cb11-6">fig.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>                            <div id="a8ee28a8-fdbc-47ce-8426-efa791748b2e" class="plotly-graph-div" style="height:525px; width:800px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("a8ee28a8-fdbc-47ce-8426-efa791748b2e")) {                    Plotly.newPlot(                        "a8ee28a8-fdbc-47ce-8426-efa791748b2e",                        [{"hovertemplate":"name=Bernd Leno<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Bernd Leno","line":{"color":"#636efa","dash":"solid","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Bernd Leno","r":[0.36458333333333337,1.0,0.8203125,0.900390625,1.0,1.0,0.36458333333333337],"showlegend":true,"subplot":"polar","theta":["High Claims","Punches","Saves","Passes","Clearances","Minutes Played","High Claims"],"type":"scatterpolar"},{"hovertemplate":"name=Petr Cech<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Petr Cech","line":{"color":"#EF553B","dash":"dot","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Petr Cech","r":[1.0,0.5714285714285714,1.0,1.0,1.0,0.20634920634920634,1.0],"showlegend":true,"subplot":"polar","theta":["High Claims","Punches","Saves","Passes","Clearances","Minutes Played","High Claims"],"type":"scatterpolar"}],                        {"template":{"data":{"barpolar":[{"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"contour"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmapgl"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmap"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2dcontour"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2d"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"geo":{"bgcolor":"white","lakecolor":"white","landcolor":"white","showlakes":true,"showland":true,"subunitcolor":"#C8D4E3"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"light"},"paper_bgcolor":"white","plot_bgcolor":"white","polar":{"angularaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""},"bgcolor":"white","radialaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"yaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"zaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"ternary":{"aaxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"baxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"bgcolor":"white","caxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""}},"title":{"x":0.05},"xaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2}}},"polar":{"domain":{"x":[0.0,1.0],"y":[0.0,1.0]},"angularaxis":{"direction":"clockwise","rotation":90}},"legend":{"title":{"text":"name"},"tracegroupgap":0,"x":0.7,"y":1.1},"margin":{"t":60},"width":800},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('a8ee28a8-fdbc-47ce-8426-efa791748b2e');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<blockquote class="blockquote">
<ul>
<li><p>Cech was getting around <strong>20% of playing time</strong> compared to Leno.</p></li>
<li><p>Distinctive <strong>styles</strong>: Cech is doing much more high claims while Leno uses more punches.</p></li>
<li><p>Cech has a better <strong>“saves per minute”</strong> ratio, but also - might be the result of him playing much less.</p></li>
</ul>
</blockquote>
</section>
<section id="most-played-defenders" class="level3">
<h3 class="anchored" data-anchor-id="most-played-defenders">4 most played Defenders</h3>
<div id="cell-24" class="cell" data-execution_count="34">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"position == 'DF' and Appearances &gt; 18"</span>)[</span>
<span id="cb12-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'clearances_per_min_played'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fouls_per_min_played'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yc_per_min_played'</span></span>
<span id="cb12-3">    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tackles_per_min_played'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_per_min_played'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_min_played'</span>]</span>
<span id="cb12-4">].rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'clearances_per_min_played'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clearances'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fouls_per_min_played'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fouls'</span></span>
<span id="cb12-5">                  , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yc_per_min_played'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yellow Cards'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tackles_per_min_played'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tackles'</span></span>
<span id="cb12-6">                  ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_per_min_played'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Assists'</span>})</span>
<span id="cb12-7"></span>
<span id="cb12-8">max_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>().to_dict()</span>
<span id="cb12-9">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(df.unstack()).reset_index()</span>
<span id="cb12-10">df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kpi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>]</span>
<span id="cb12-11">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'denom'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.kpi.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(max_map)</span>
<span id="cb12-12">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df.denom</span>
<span id="cb12-13">df.T</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="34">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
<th data-quarto-table-cell-role="th">11</th>
<th data-quarto-table-cell-role="th">12</th>
<th data-quarto-table-cell-role="th">13</th>
<th data-quarto-table-cell-role="th">14</th>
<th data-quarto-table-cell-role="th">15</th>
<th data-quarto-table-cell-role="th">16</th>
<th data-quarto-table-cell-role="th">17</th>
<th data-quarto-table-cell-role="th">18</th>
<th data-quarto-table-cell-role="th">19</th>
<th data-quarto-table-cell-role="th">20</th>
<th data-quarto-table-cell-role="th">21</th>
<th data-quarto-table-cell-role="th">22</th>
<th data-quarto-table-cell-role="th">23</th>
<th data-quarto-table-cell-role="th">24</th>
<th data-quarto-table-cell-role="th">25</th>
<th data-quarto-table-cell-role="th">26</th>
<th data-quarto-table-cell-role="th">27</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">kpi</td>
<td>Clearances</td>
<td>Clearances</td>
<td>Clearances</td>
<td>Clearances</td>
<td>Fouls</td>
<td>Fouls</td>
<td>Fouls</td>
<td>Fouls</td>
<td>Yellow Cards</td>
<td>Yellow Cards</td>
<td>Yellow Cards</td>
<td>Yellow Cards</td>
<td>Tackles</td>
<td>Tackles</td>
<td>Tackles</td>
<td>Tackles</td>
<td>Passes</td>
<td>Passes</td>
<td>Passes</td>
<td>Passes</td>
<td>Minutes Played</td>
<td>Minutes Played</td>
<td>Minutes Played</td>
<td>Minutes Played</td>
<td>Assists</td>
<td>Assists</td>
<td>Assists</td>
<td>Assists</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">name</td>
<td>Héctor Bellerín</td>
<td>Sead Kolasinac</td>
<td>Shkodran Mustafi</td>
<td>Sokratis</td>
<td>Héctor Bellerín</td>
<td>Sead Kolasinac</td>
<td>Shkodran Mustafi</td>
<td>Sokratis</td>
<td>Héctor Bellerín</td>
<td>Sead Kolasinac</td>
<td>Shkodran Mustafi</td>
<td>Sokratis</td>
<td>Héctor Bellerín</td>
<td>Sead Kolasinac</td>
<td>Shkodran Mustafi</td>
<td>Sokratis</td>
<td>Héctor Bellerín</td>
<td>Sead Kolasinac</td>
<td>Shkodran Mustafi</td>
<td>Sokratis</td>
<td>Héctor Bellerín</td>
<td>Sead Kolasinac</td>
<td>Shkodran Mustafi</td>
<td>Sokratis</td>
<td>Héctor Bellerín</td>
<td>Sead Kolasinac</td>
<td>Shkodran Mustafi</td>
<td>Sokratis</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">value</td>
<td>0.349637</td>
<td>0.214844</td>
<td>1.0</td>
<td>0.797709</td>
<td>0.620299</td>
<td>0.66036</td>
<td>0.954555</td>
<td>1.0</td>
<td>0.358611</td>
<td>0.484788</td>
<td>0.630688</td>
<td>1.0</td>
<td>0.412695</td>
<td>0.758747</td>
<td>1.0</td>
<td>0.805571</td>
<td>0.758673</td>
<td>0.761175</td>
<td>1.0</td>
<td>0.934498</td>
<td>0.586233</td>
<td>0.722753</td>
<td>1.0</td>
<td>0.840918</td>
<td>1.0</td>
<td>0.811111</td>
<td>0.0</td>
<td>0.278854</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">denom</td>
<td>0.061568</td>
<td>0.061568</td>
<td>0.061568</td>
<td>0.061568</td>
<td>0.016826</td>
<td>0.016826</td>
<td>0.016826</td>
<td>0.016826</td>
<td>0.005457</td>
<td>0.005457</td>
<td>0.005457</td>
<td>0.005457</td>
<td>0.023709</td>
<td>0.023709</td>
<td>0.023709</td>
<td>0.023709</td>
<td>0.674952</td>
<td>0.674952</td>
<td>0.674952</td>
<td>0.674952</td>
<td>2615.0</td>
<td>2615.0</td>
<td>2615.0</td>
<td>2615.0</td>
<td>0.003262</td>
<td>0.003262</td>
<td>0.003262</td>
<td>0.003262</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="35">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.line_polar(df, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>, theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kpi'</span></span>
<span id="cb13-2">                    ,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, line_dash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, line_close<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plotly_white"</span>)</span>
<span id="cb13-3">fig.update_traces(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines'</span>, line_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-4">fig.update_layout(legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>))</span>
<span id="cb13-5">fig.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>                            <div id="7fccb54c-8f73-42e3-99f9-3d6d1f8dd82e" class="plotly-graph-div" style="height:525px; width:100%;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("7fccb54c-8f73-42e3-99f9-3d6d1f8dd82e")) {                    Plotly.newPlot(                        "7fccb54c-8f73-42e3-99f9-3d6d1f8dd82e",                        [{"hovertemplate":"name=H\u00e9ctor Beller\u00edn<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"H\u00e9ctor Beller\u00edn","line":{"color":"#636efa","dash":"solid","width":4},"marker":{"symbol":"circle"},"mode":"lines","name":"H\u00e9ctor Beller\u00edn","r":[0.3496371747031153,0.6202993600253874,0.35861056751467707,0.4126949056246449,0.7586727500189412,0.5862332695984703,1.0,0.3496371747031153],"showlegend":true,"subplot":"polar","theta":["Clearances","Fouls","Yellow Cards","Tackles","Passes","Minutes Played","Assists","Clearances"],"type":"scatterpolar"},{"hovertemplate":"name=Sead Kolasinac<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Sead Kolasinac","line":{"color":"#EF553B","dash":"dot","width":4},"marker":{"symbol":"circle"},"mode":"lines","name":"Sead Kolasinac","r":[0.21484439186302537,0.6603603603603604,0.48478835978835977,0.7587472264891619,0.7611748130161727,0.722753346080306,0.8111111111111111,0.21484439186302537],"showlegend":true,"subplot":"polar","theta":["Clearances","Fouls","Yellow Cards","Tackles","Passes","Minutes Played","Assists","Clearances"],"type":"scatterpolar"},{"hovertemplate":"name=Shkodran Mustafi<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Shkodran Mustafi","line":{"color":"#00cc96","dash":"dash","width":4},"marker":{"symbol":"circle"},"mode":"lines","name":"Shkodran Mustafi","r":[1.0,0.9545553201384941,0.6306883365200765,1.0,1.0,1.0,0.0,1.0],"showlegend":true,"subplot":"polar","theta":["Clearances","Fouls","Yellow Cards","Tackles","Passes","Minutes Played","Assists","Clearances"],"type":"scatterpolar"},{"hovertemplate":"name=Sokratis<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Sokratis","line":{"color":"#ab63fa","dash":"longdash","width":4},"marker":{"symbol":"circle"},"mode":"lines","name":"Sokratis","r":[0.797708727004652,1.0,1.0,0.8055714474321172,0.9344976534530891,0.8409177820267686,0.2788540245566167,0.797708727004652],"showlegend":true,"subplot":"polar","theta":["Clearances","Fouls","Yellow Cards","Tackles","Passes","Minutes Played","Assists","Clearances"],"type":"scatterpolar"}],                        {"template":{"data":{"barpolar":[{"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"contour"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmapgl"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmap"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2dcontour"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2d"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"geo":{"bgcolor":"white","lakecolor":"white","landcolor":"white","showlakes":true,"showland":true,"subunitcolor":"#C8D4E3"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"light"},"paper_bgcolor":"white","plot_bgcolor":"white","polar":{"angularaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""},"bgcolor":"white","radialaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"yaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"zaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"ternary":{"aaxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"baxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"bgcolor":"white","caxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""}},"title":{"x":0.05},"xaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2}}},"polar":{"domain":{"x":[0.0,1.0],"y":[0.0,1.0]},"angularaxis":{"direction":"clockwise","rotation":90}},"legend":{"title":{"text":"name"},"tracegroupgap":0,"x":0,"y":1.1},"margin":{"t":60}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('7fccb54c-8f73-42e3-99f9-3d6d1f8dd82e');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<blockquote class="blockquote">
<ul>
<li><p><strong>Mustafi</strong> leads on most defensive metrics. He also played most minutes from all defenders (3rd overall, after Leno and Aubameyang).</p></li>
<li><p><strong>Sokratis</strong> has a similar profile, with the exception that he leads by far in yellow cards.</p></li>
<li><p>Bellerin and Kolasinac have more <strong>offensive profiles</strong>, both taking third place in overall team assists rank (5 each, Bellerin played less).</p></li>
</ul>
</blockquote>
</section>
<section id="midfielders" class="level3">
<h3 class="anchored" data-anchor-id="midfielders">Midfielders</h3>
<div id="cell-28" class="cell" data-execution_count="36">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">mf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"position == 'MF' and Appearances &gt; 20"</span>)[</span>
<span id="cb14-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_min_played'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dispossessed_per_min_played'</span></span>
<span id="cb14-3">    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals_per_min_played'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_per_min_played'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shots_per_min_played'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tackles_per_min_played'</span></span>
<span id="cb14-4">    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'touches_per_min_played'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minutes Played'</span>]</span>
<span id="cb14-5">].rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Assists'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dispossessed_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dispossessed'</span></span>
<span id="cb14-6">    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goals'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passes'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shots_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shots'</span></span>
<span id="cb14-7">    , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tackles_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tackles'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'touches_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touches'</span>})</span>
<span id="cb14-8"></span>
<span id="cb14-9">max_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mf.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>().to_dict()</span>
<span id="cb14-10"></span>
<span id="cb14-11">mf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(mf.unstack()).reset_index()</span>
<span id="cb14-12"></span>
<span id="cb14-13">mf.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kpi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>]</span>
<span id="cb14-14"></span>
<span id="cb14-15">mf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'denom'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mf.kpi.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(max_map)</span>
<span id="cb14-16"></span>
<span id="cb14-17">mf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mf.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> mf.denom</span>
<span id="cb14-18">mf.T</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="36">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
<th data-quarto-table-cell-role="th">11</th>
<th data-quarto-table-cell-role="th">12</th>
<th data-quarto-table-cell-role="th">13</th>
<th data-quarto-table-cell-role="th">14</th>
<th data-quarto-table-cell-role="th">15</th>
<th data-quarto-table-cell-role="th">16</th>
<th data-quarto-table-cell-role="th">17</th>
<th data-quarto-table-cell-role="th">18</th>
<th data-quarto-table-cell-role="th">19</th>
<th data-quarto-table-cell-role="th">20</th>
<th data-quarto-table-cell-role="th">21</th>
<th data-quarto-table-cell-role="th">22</th>
<th data-quarto-table-cell-role="th">23</th>
<th data-quarto-table-cell-role="th">24</th>
<th data-quarto-table-cell-role="th">25</th>
<th data-quarto-table-cell-role="th">26</th>
<th data-quarto-table-cell-role="th">27</th>
<th data-quarto-table-cell-role="th">28</th>
<th data-quarto-table-cell-role="th">29</th>
<th data-quarto-table-cell-role="th">30</th>
<th data-quarto-table-cell-role="th">31</th>
<th data-quarto-table-cell-role="th">32</th>
<th data-quarto-table-cell-role="th">33</th>
<th data-quarto-table-cell-role="th">34</th>
<th data-quarto-table-cell-role="th">35</th>
<th data-quarto-table-cell-role="th">36</th>
<th data-quarto-table-cell-role="th">37</th>
<th data-quarto-table-cell-role="th">38</th>
<th data-quarto-table-cell-role="th">39</th>
<th data-quarto-table-cell-role="th">40</th>
<th data-quarto-table-cell-role="th">41</th>
<th data-quarto-table-cell-role="th">42</th>
<th data-quarto-table-cell-role="th">43</th>
<th data-quarto-table-cell-role="th">44</th>
<th data-quarto-table-cell-role="th">45</th>
<th data-quarto-table-cell-role="th">46</th>
<th data-quarto-table-cell-role="th">47</th>
<th data-quarto-table-cell-role="th">48</th>
<th data-quarto-table-cell-role="th">49</th>
<th data-quarto-table-cell-role="th">50</th>
<th data-quarto-table-cell-role="th">51</th>
<th data-quarto-table-cell-role="th">52</th>
<th data-quarto-table-cell-role="th">53</th>
<th data-quarto-table-cell-role="th">54</th>
<th data-quarto-table-cell-role="th">55</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">kpi</td>
<td>Assists</td>
<td>Assists</td>
<td>Assists</td>
<td>Assists</td>
<td>Assists</td>
<td>Assists</td>
<td>Assists</td>
<td>Dispossessed</td>
<td>Dispossessed</td>
<td>Dispossessed</td>
<td>Dispossessed</td>
<td>Dispossessed</td>
<td>Dispossessed</td>
<td>Dispossessed</td>
<td>Goals</td>
<td>Goals</td>
<td>Goals</td>
<td>Goals</td>
<td>Goals</td>
<td>Goals</td>
<td>Goals</td>
<td>Passes</td>
<td>Passes</td>
<td>Passes</td>
<td>Passes</td>
<td>Passes</td>
<td>Passes</td>
<td>Passes</td>
<td>Shots</td>
<td>Shots</td>
<td>Shots</td>
<td>Shots</td>
<td>Shots</td>
<td>Shots</td>
<td>Shots</td>
<td>Tackles</td>
<td>Tackles</td>
<td>Tackles</td>
<td>Tackles</td>
<td>Tackles</td>
<td>Tackles</td>
<td>Tackles</td>
<td>Touches</td>
<td>Touches</td>
<td>Touches</td>
<td>Touches</td>
<td>Touches</td>
<td>Touches</td>
<td>Touches</td>
<td>Minutes Played</td>
<td>Minutes Played</td>
<td>Minutes Played</td>
<td>Minutes Played</td>
<td>Minutes Played</td>
<td>Minutes Played</td>
<td>Minutes Played</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">name</td>
<td>Aaron Ramsey</td>
<td>Granit Xhaka</td>
<td>Henrikh Mkhitaryan</td>
<td>Lucas Torreira</td>
<td>Matteo Guendouzi</td>
<td>Mesut Özil</td>
<td>Nacho Monreal</td>
<td>Aaron Ramsey</td>
<td>Granit Xhaka</td>
<td>Henrikh Mkhitaryan</td>
<td>Lucas Torreira</td>
<td>Matteo Guendouzi</td>
<td>Mesut Özil</td>
<td>Nacho Monreal</td>
<td>Aaron Ramsey</td>
<td>Granit Xhaka</td>
<td>Henrikh Mkhitaryan</td>
<td>Lucas Torreira</td>
<td>Matteo Guendouzi</td>
<td>Mesut Özil</td>
<td>Nacho Monreal</td>
<td>Aaron Ramsey</td>
<td>Granit Xhaka</td>
<td>Henrikh Mkhitaryan</td>
<td>Lucas Torreira</td>
<td>Matteo Guendouzi</td>
<td>Mesut Özil</td>
<td>Nacho Monreal</td>
<td>Aaron Ramsey</td>
<td>Granit Xhaka</td>
<td>Henrikh Mkhitaryan</td>
<td>Lucas Torreira</td>
<td>Matteo Guendouzi</td>
<td>Mesut Özil</td>
<td>Nacho Monreal</td>
<td>Aaron Ramsey</td>
<td>Granit Xhaka</td>
<td>Henrikh Mkhitaryan</td>
<td>Lucas Torreira</td>
<td>Matteo Guendouzi</td>
<td>Mesut Özil</td>
<td>Nacho Monreal</td>
<td>Aaron Ramsey</td>
<td>Granit Xhaka</td>
<td>Henrikh Mkhitaryan</td>
<td>Lucas Torreira</td>
<td>Matteo Guendouzi</td>
<td>Mesut Özil</td>
<td>Nacho Monreal</td>
<td>Aaron Ramsey</td>
<td>Granit Xhaka</td>
<td>Henrikh Mkhitaryan</td>
<td>Lucas Torreira</td>
<td>Matteo Guendouzi</td>
<td>Mesut Özil</td>
<td>Nacho Monreal</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">value</td>
<td>1.0</td>
<td>0.176996</td>
<td>0.538524</td>
<td>0.186073</td>
<td>0.0</td>
<td>0.25426</td>
<td>0.356797</td>
<td>1.0</td>
<td>0.334326</td>
<td>0.74795</td>
<td>0.578892</td>
<td>0.71183</td>
<td>0.960538</td>
<td>0.079288</td>
<td>0.825301</td>
<td>0.438225</td>
<td>1.0</td>
<td>0.230349</td>
<td>0.0</td>
<td>0.786904</td>
<td>0.147233</td>
<td>0.648453</td>
<td>1.0</td>
<td>0.539397</td>
<td>0.744561</td>
<td>0.831103</td>
<td>0.715386</td>
<td>0.699188</td>
<td>0.833723</td>
<td>0.389036</td>
<td>1.0</td>
<td>0.352575</td>
<td>0.250615</td>
<td>0.211982</td>
<td>0.126199</td>
<td>0.937048</td>
<td>0.760976</td>
<td>0.623358</td>
<td>1.0</td>
<td>0.751821</td>
<td>0.252269</td>
<td>0.68834</td>
<td>0.696084</td>
<td>1.0</td>
<td>0.654089</td>
<td>0.776378</td>
<td>0.824114</td>
<td>0.714137</td>
<td>0.762703</td>
<td>0.530988</td>
<td>1.0</td>
<td>0.657337</td>
<td>0.95122</td>
<td>0.856457</td>
<td>0.696122</td>
<td>0.744102</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">denom</td>
<td>0.004518</td>
<td>0.004518</td>
<td>0.004518</td>
<td>0.004518</td>
<td>0.004518</td>
<td>0.004518</td>
<td>0.004518</td>
<td>0.020331</td>
<td>0.020331</td>
<td>0.020331</td>
<td>0.020331</td>
<td>0.020331</td>
<td>0.020331</td>
<td>0.020331</td>
<td>0.00365</td>
<td>0.00365</td>
<td>0.00365</td>
<td>0.00365</td>
<td>0.00365</td>
<td>0.00365</td>
<td>0.00365</td>
<td>0.897641</td>
<td>0.897641</td>
<td>0.897641</td>
<td>0.897641</td>
<td>0.897641</td>
<td>0.897641</td>
<td>0.897641</td>
<td>0.029805</td>
<td>0.029805</td>
<td>0.029805</td>
<td>0.029805</td>
<td>0.029805</td>
<td>0.029805</td>
<td>0.029805</td>
<td>0.027322</td>
<td>0.027322</td>
<td>0.027322</td>
<td>0.027322</td>
<td>0.027322</td>
<td>0.027322</td>
<td>0.027322</td>
<td>1.113155</td>
<td>1.113155</td>
<td>1.113155</td>
<td>1.113155</td>
<td>1.113155</td>
<td>1.113155</td>
<td>1.113155</td>
<td>2501.0</td>
<td>2501.0</td>
<td>2501.0</td>
<td>2501.0</td>
<td>2501.0</td>
<td>2501.0</td>
<td>2501.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-29" class="cell" data-execution_count="37">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.line_polar(mf, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>, theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kpi'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, line_dash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>,</span>
<span id="cb15-2">                    line_close<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plotly_white"</span>,</span>
<span id="cb15-3">                    width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># , color_discrete_sequence= px.colors.sequential.Plasma[-3::-1])</span></span>
<span id="cb15-4"></span>
<span id="cb15-5">fig.update_traces(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines'</span>, line_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb15-6">fig.update_layout(legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>))</span>
<span id="cb15-7">fig.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>                            <div id="14191a60-798a-46fd-9f07-aeb254b303ea" class="plotly-graph-div" style="height:525px; width:800px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("14191a60-798a-46fd-9f07-aeb254b303ea")) {                    Plotly.newPlot(                        "14191a60-798a-46fd-9f07-aeb254b303ea",                        [{"hovertemplate":"name=Aaron Ramsey<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Aaron Ramsey","line":{"color":"#636efa","dash":"solid","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Aaron Ramsey","r":[1.0,1.0,0.8253012048192772,0.6484533903990125,0.8337226456847799,0.9370481927710843,0.6960841750623181,0.5309876049580168,1.0],"showlegend":true,"subplot":"polar","theta":["Assists","Dispossessed","Goals","Passes","Shots","Tackles","Touches","Minutes Played","Assists"],"type":"scatterpolar"},{"hovertemplate":"name=Granit Xhaka<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Granit Xhaka","line":{"color":"#EF553B","dash":"dot","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Granit Xhaka","r":[0.17699586831933894,0.33432552904764024,0.43822471011595365,1.0,0.3890362222457956,0.7609756097560976,1.0,1.0,0.17699586831933894],"showlegend":true,"subplot":"polar","theta":["Assists","Dispossessed","Goals","Passes","Shots","Tackles","Touches","Minutes Played","Assists"],"type":"scatterpolar"},{"hovertemplate":"name=Henrikh Mkhitaryan<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Henrikh Mkhitaryan","line":{"color":"#00cc96","dash":"dash","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Henrikh Mkhitaryan","r":[0.5385239253852393,0.7479498963683879,1.0,0.53939709221357,1.0,0.6233576642335766,0.6540889283916436,0.6573370651739304,0.5385239253852393],"showlegend":true,"subplot":"polar","theta":["Assists","Dispossessed","Goals","Passes","Shots","Tackles","Touches","Minutes Played","Assists"],"type":"scatterpolar"},{"hovertemplate":"name=Lucas Torreira<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Lucas Torreira","line":{"color":"#ab63fa","dash":"longdash","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Lucas Torreira","r":[0.18607257951520248,0.5788924696028521,0.23034888608659101,0.7445605619324995,0.3525748256427414,1.0,0.7763778367226642,0.9512195121951219,0.18607257951520248],"showlegend":true,"subplot":"polar","theta":["Assists","Dispossessed","Goals","Passes","Shots","Tackles","Touches","Minutes Played","Assists"],"type":"scatterpolar"},{"hovertemplate":"name=Matteo Guendouzi<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Matteo Guendouzi","line":{"color":"#FFA15A","dash":"dashdot","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Matteo Guendouzi","r":[0.0,0.7118304111768164,0.0,0.8311026266482837,0.2506145315268965,0.7518207282913165,0.8241144877491225,0.8564574170331867,0.0],"showlegend":true,"subplot":"polar","theta":["Assists","Dispossessed","Goals","Passes","Shots","Tackles","Touches","Minutes Played","Assists"],"type":"scatterpolar"},{"hovertemplate":"name=Mesut \u00d6zil<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Mesut \u00d6zil","line":{"color":"#19d3f3","dash":"longdashdot","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Mesut \u00d6zil","r":[0.25426000382921693,0.9605377922437084,0.7869040781160254,0.7153859044734038,0.21198232308431703,0.25226881102814475,0.714137402866631,0.6961215513794482,0.25426000382921693],"showlegend":true,"subplot":"polar","theta":["Assists","Dispossessed","Goals","Passes","Shots","Tackles","Touches","Minutes Played","Assists"],"type":"scatterpolar"},{"hovertemplate":"name=Nacho Monreal<br>value=%{r}<br>kpi=%{theta}<extra></extra>","legendgroup":"Nacho Monreal","line":{"color":"#FF6692","dash":"solid","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Nacho Monreal","r":[0.3567974207415368,0.07928831572034152,0.14723267060720044,0.699187758575089,0.12619943194902894,0.6883396023643202,0.7627025082300333,0.7441023590563774,0.3567974207415368],"showlegend":true,"subplot":"polar","theta":["Assists","Dispossessed","Goals","Passes","Shots","Tackles","Touches","Minutes Played","Assists"],"type":"scatterpolar"}],                        {"template":{"data":{"barpolar":[{"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"contour"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmapgl"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmap"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2dcontour"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2d"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"geo":{"bgcolor":"white","lakecolor":"white","landcolor":"white","showlakes":true,"showland":true,"subunitcolor":"#C8D4E3"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"light"},"paper_bgcolor":"white","plot_bgcolor":"white","polar":{"angularaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""},"bgcolor":"white","radialaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"yaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"zaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"ternary":{"aaxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"baxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"bgcolor":"white","caxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""}},"title":{"x":0.05},"xaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2}}},"polar":{"domain":{"x":[0.0,1.0],"y":[0.0,1.0]},"angularaxis":{"direction":"clockwise","rotation":90}},"legend":{"title":{"text":"name"},"tracegroupgap":0,"x":1,"y":1.1},"margin":{"t":60},"width":800},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('14191a60-798a-46fd-9f07-aeb254b303ea');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<blockquote class="blockquote">
<ul>
<li><p>There are two clear <strong>patterns</strong> on the chart: <strong>defensive and offensive</strong>. Xhaka and Torreira are representatives of the former, while Mkhitaryan and Özil of the latter.</p></li>
<li><p><strong>Ramsey</strong> is an interesting exception of a “complete” midfielder here, leading by assists per minute played, but also participating a lot in tackles.</p></li>
</ul>
</blockquote>
</section>
<section id="forwards" class="level3">
<h3 class="anchored" data-anchor-id="forwards">Forwards</h3>
<div id="cell-32" class="cell" data-execution_count="38">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">fw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"position == 'FW' and Appearances &gt; 10"</span>)[</span>
<span id="cb16-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_min_played'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'missed_chances_per_min_played'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals_per_min_played'</span></span>
<span id="cb16-3">    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'offsides_per_min_played'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shots_per_min_played'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dispossessed_per_min_played'</span></span>
<span id="cb16-4">     ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fouls_per_min_played'</span>]</span>
<span id="cb16-5">].rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Assists'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'missed_chances_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Missed Chances'</span></span>
<span id="cb16-6">                 ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goals'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'offsides_per_min_played'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Offsides'</span></span>
<span id="cb16-7">                 ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shots_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shots'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dispossessed_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dispossessed'</span></span>
<span id="cb16-8">                 ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fouls_per_min_played'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fouls'</span>})</span>
<span id="cb16-9"></span>
<span id="cb16-10">max_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fw.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>().to_dict()</span>
<span id="cb16-11">fw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(fw.unstack()).reset_index()</span>
<span id="cb16-12">fw.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kpi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>]</span>
<span id="cb16-13">fw[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'denom'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fw.kpi.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(max_map)</span>
<span id="cb16-14">fw[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fw.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> fw.denom</span>
<span id="cb16-15">fw.T</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="38">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
<th data-quarto-table-cell-role="th">11</th>
<th data-quarto-table-cell-role="th">12</th>
<th data-quarto-table-cell-role="th">13</th>
<th data-quarto-table-cell-role="th">14</th>
<th data-quarto-table-cell-role="th">15</th>
<th data-quarto-table-cell-role="th">16</th>
<th data-quarto-table-cell-role="th">17</th>
<th data-quarto-table-cell-role="th">18</th>
<th data-quarto-table-cell-role="th">19</th>
<th data-quarto-table-cell-role="th">20</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">kpi</td>
<td>Assists</td>
<td>Assists</td>
<td>Assists</td>
<td>Missed Chances</td>
<td>Missed Chances</td>
<td>Missed Chances</td>
<td>Goals</td>
<td>Goals</td>
<td>Goals</td>
<td>Offsides</td>
<td>Offsides</td>
<td>Offsides</td>
<td>Shots</td>
<td>Shots</td>
<td>Shots</td>
<td>Dispossessed</td>
<td>Dispossessed</td>
<td>Dispossessed</td>
<td>Fouls</td>
<td>Fouls</td>
<td>Fouls</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">name</td>
<td>Alex Iwobi</td>
<td>Alexandre Lacazette</td>
<td>Pierre-Emerick Aubameyang</td>
<td>Alex Iwobi</td>
<td>Alexandre Lacazette</td>
<td>Pierre-Emerick Aubameyang</td>
<td>Alex Iwobi</td>
<td>Alexandre Lacazette</td>
<td>Pierre-Emerick Aubameyang</td>
<td>Alex Iwobi</td>
<td>Alexandre Lacazette</td>
<td>Pierre-Emerick Aubameyang</td>
<td>Alex Iwobi</td>
<td>Alexandre Lacazette</td>
<td>Pierre-Emerick Aubameyang</td>
<td>Alex Iwobi</td>
<td>Alexandre Lacazette</td>
<td>Pierre-Emerick Aubameyang</td>
<td>Alex Iwobi</td>
<td>Alexandre Lacazette</td>
<td>Pierre-Emerick Aubameyang</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">value</td>
<td>0.952713</td>
<td>1.0</td>
<td>0.573279</td>
<td>0.180638</td>
<td>0.616211</td>
<td>1.0</td>
<td>0.188848</td>
<td>0.644221</td>
<td>1.0</td>
<td>0.105857</td>
<td>1.0</td>
<td>0.879028</td>
<td>0.51565</td>
<td>0.939445</td>
<td>1.0</td>
<td>1.0</td>
<td>0.857514</td>
<td>0.425511</td>
<td>0.19926</td>
<td>1.0</td>
<td>0.233808</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">denom</td>
<td>0.003194</td>
<td>0.003194</td>
<td>0.003194</td>
<td>0.008422</td>
<td>0.008422</td>
<td>0.008422</td>
<td>0.008056</td>
<td>0.008056</td>
<td>0.008056</td>
<td>0.009581</td>
<td>0.009581</td>
<td>0.009581</td>
<td>0.03442</td>
<td>0.03442</td>
<td>0.03442</td>
<td>0.028398</td>
<td>0.028398</td>
<td>0.028398</td>
<td>0.020359</td>
<td>0.020359</td>
<td>0.020359</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-33" class="cell" data-execution_count="39">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.line_polar(fw, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>, theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kpi'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, line_dash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>,</span>
<span id="cb17-2">                    line_close<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plotly_white"</span>,</span>
<span id="cb17-3">                    width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>)</span>
<span id="cb17-4">fig.update_traces(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines'</span>, line_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb17-5">fig.update_layout(legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>))</span>
<span id="cb17-6">fig.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>                            <div id="bf868811-50b1-4b7d-b727-0be55cb01508" class="plotly-graph-div" style="height:525px; width:800px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("bf868811-50b1-4b7d-b727-0be55cb01508")) {                    Plotly.newPlot(                        "bf868811-50b1-4b7d-b727-0be55cb01508",                        [{"hovertemplate":"name=Alex Iwobi<br>value=%{text}<br>kpi=%{theta}<extra></extra>","legendgroup":"Alex Iwobi","line":{"color":"#636efa","dash":"solid","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Alex Iwobi","r":[0.952712981744422,0.18063762236528794,0.18884842338189195,0.10585699797160243,0.5156499503689957,1.0,0.1992602314759575,0.952712981744422],"showlegend":true,"subplot":"polar","text":[0.952712981744422,0.18063762236528794,0.18884842338189195,0.10585699797160243,0.5156499503689957,1.0,0.1992602314759575,0.952712981744422],"theta":["Assists","Missed Chances","Goals","Offsides","Shots","Dispossessed","Fouls","Assists"],"type":"scatterpolar"},{"hovertemplate":"name=Alexandre Lacazette<br>value=%{text}<br>kpi=%{theta}<extra></extra>","legendgroup":"Alexandre Lacazette","line":{"color":"#EF553B","dash":"dot","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Alexandre Lacazette","r":[1.0,0.6162110561485724,0.6442206496098711,1.0,0.9394445152248695,0.8575135443398917,1.0,1.0],"showlegend":true,"subplot":"polar","text":[1.0,0.6162110561485724,0.6442206496098711,1.0,0.9394445152248695,0.8575135443398917,1.0,1.0],"theta":["Assists","Missed Chances","Goals","Offsides","Shots","Dispossessed","Fouls","Assists"],"type":"scatterpolar"},{"hovertemplate":"name=Pierre-Emerick Aubameyang<br>value=%{text}<br>kpi=%{theta}<extra></extra>","legendgroup":"Pierre-Emerick Aubameyang","line":{"color":"#00cc96","dash":"dash","width":5},"marker":{"symbol":"circle"},"mode":"lines","name":"Pierre-Emerick Aubameyang","r":[0.5732790186744783,1.0,1.0,0.8790278286341999,1.0,0.4255113249986923,0.23380791349861071,0.5732790186744783],"showlegend":true,"subplot":"polar","text":[0.5732790186744783,1.0,1.0,0.8790278286341999,1.0,0.4255113249986923,0.23380791349861071,0.5732790186744783],"theta":["Assists","Missed Chances","Goals","Offsides","Shots","Dispossessed","Fouls","Assists"],"type":"scatterpolar"}],                        {"template":{"data":{"barpolar":[{"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"contour"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmapgl"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmap"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2dcontour"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2d"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"geo":{"bgcolor":"white","lakecolor":"white","landcolor":"white","showlakes":true,"showland":true,"subunitcolor":"#C8D4E3"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"light"},"paper_bgcolor":"white","plot_bgcolor":"white","polar":{"angularaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""},"bgcolor":"white","radialaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"yaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"zaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"ternary":{"aaxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"baxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"bgcolor":"white","caxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""}},"title":{"x":0.05},"xaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2}}},"polar":{"domain":{"x":[0.0,1.0],"y":[0.0,1.0]},"angularaxis":{"direction":"clockwise","rotation":90}},"legend":{"title":{"text":"name"},"tracegroupgap":0,"x":0.8,"y":1.1},"margin":{"t":60},"width":800},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('bf868811-50b1-4b7d-b727-0be55cb01508');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<blockquote class="blockquote">
<ul>
<li><p>Lacazette and Aubameyang are <strong>2nd and 4th in most minutes played</strong> during the season.</p></li>
<li><p>Lacazette <strong>fouls five times more</strong> than Aubameyang or Iwobi.</p></li>
<li><p>Aubameyang leads on <strong>goal</strong> effectiveness, while Iwobi and Lacazette are great in <strong>assists</strong>.</p></li>
</ul>
</blockquote>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final thoughts</h2>
<p>I used canva to assemble the graphs above into the final <a href="https://www.canva.com/design/DADgwo_GAu0/view?utm_content=DADgwo_GAu0&amp;utm_campaign=designshare&amp;utm_medium=link&amp;utm_source=publishsharelink">image</a>, added some red-white colours. I didn’t come up with any breakthroughs, of course. But I had a couple of interesting observations and discoveries during the process. And had some fun too!</p>
<p>The greatest benefit was to document the process itself. As Jason Fried <a href="https://medium.com/@jasonfried/its-worth-working-on-becoming-a-better-writer-72db34b81357">urges people</a> to write more to really think the idea through, just sitting down and writing the process of analysis was rewarding.</p>


</section>

 ]]></description>
  <category>analytics</category>
  <guid>https://www.eliasnema.com/posts/arsenal/arsenal.html</guid>
  <pubDate>Wed, 31 Jul 2019 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
